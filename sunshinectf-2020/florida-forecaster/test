                             //
                             // segment_2.1 
                             // Loadable segment  [0x0 - 0x9d7]
                             // ram: 00100000-00100317
                             //
             assume DF = 0x0  (Default)
        00100000 7f 45 4c        Elf64_Ehdr
                 46 02 01 
                 01 00 00 
           00100000 7f              db        7Fh                     e_ident_magi
           00100001 45 4c 46        ds        "ELF"                   e_ident_magi
           00100004 02              db        2h                      e_ident_class
           00100005 01              db        1h                      e_ident_data
           00100006 01              db        1h                      e_ident_vers
           00100007 00 00 00 00 00  db[9]                             e_ident_pad
                    00 00 00 00
           00100010 03 00           dw        3h                      e_type
           00100012 3e 00           dw        3Eh                     e_machine
           00100014 01 00 00 00     ddw       1h                      e_version
           00100018 a0 11 00 00 00  dq        entry                   e_entry
                    00 00 00
           00100020 40 00 00 00 00  dq        Elf64_Phdr_ARRAY_00100  e_phoff       = 
                    00 00 00
           00100028 a8 31 00 00 00  dq        Elf64_Shdr_ARRAY__elfS  e_shoff
                    00 00 00
           00100030 00 00 00 00     ddw       0h                      e_flags
           00100034 40 00           dw        40h                     e_ehsize
           00100036 38 00           dw        38h                     e_phentsize
           00100038 0d 00           dw        Dh                      e_phnum
           0010003a 40 00           dw        40h                     e_shentsize
           0010003c 1d 00           dw        1Dh                     e_shnum
           0010003e 1c 00           dw        1Ch                     e_shstrndx
                             Elf64_Phdr_ARRAY_00100040                       XREF[2]:     00100020(*), 00100050(*)  
        00100040 06 00 00        Elf64_Ph                                                    PT_PHDR - Program header table
                 00 04 00 
                 00 00 40 
                             //
                             // .interp 
                             // SHT_PROGBITS  [0x318 - 0x333]
                             // ram: 00100318-00100333
                             //
                             s_/lib64/ld-linux-x86-64.so.2_00100318          XREF[2]:     00100088(*), 
                                                                                          _elfSectionHeaders::00000050(*)  
        00100318 2f 6c 69        ds         "/lib64/ld-linux-x86-64.so.2"                    Initial Elf program interpreter
                 62 36 34 
                 2f 6c 64 
                             //
                             // .note.gnu.property 
                             // SHT_NOTE  [0x338 - 0x357]
                             // ram: 00100338-00100357
                             //
                             DAT_00100338                                    XREF[3]:     001001d8(*), 00100248(*), 
                                                                                          _elfSectionHeaders::00000090(*)  
        00100338 04              ??         04h
        00100339 00              ??         00h
        0010033a 00              ??         00h
        0010033b 00              ??         00h
        0010033c 10              ??         10h
        0010033d 00              ??         00h
        0010033e 00              ??         00h
        0010033f 00              ??         00h
        00100340 05              ??         05h
        00100341 00              ??         00h
        00100342 00              ??         00h
        00100343 00              ??         00h
        00100344 47              ??         47h    G
        00100345 4e              ??         4Eh    N
        00100346 55              ??         55h    U
        00100347 00              ??         00h
        00100348 02              ??         02h
        00100349 00              ??         00h
        0010034a 00              ??         00h
        0010034b c0              ??         C0h
        0010034c 04              ??         04h
        0010034d 00              ??         00h
        0010034e 00              ??         00h
        0010034f 00              ??         00h
        00100350 03              ??         03h
        00100351 00              ??         00h
        00100352 00              ??         00h
        00100353 00              ??         00h
        00100354 00              ??         00h
        00100355 00              ??         00h
        00100356 00              ??         00h
        00100357 00              ??         00h
                             //
                             // .note.gnu.build-id 
                             // SHT_NOTE  [0x358 - 0x37b]
                             // ram: 00100358-0010037b
                             //
                             DAT_00100358                                    XREF[2]:     00100210(*), 
                                                                                          _elfSectionHeaders::000000d0(*)  
        00100358 04              ??         04h
        00100359 00              ??         00h
        0010035a 00              ??         00h
        0010035b 00              ??         00h
        0010035c 14              ??         14h
        0010035d 00              ??         00h
        0010035e 00              ??         00h
        0010035f 00              ??         00h
        00100360 03              ??         03h
        00100361 00              ??         00h
        00100362 00              ??         00h
        00100363 00              ??         00h
        00100364 47              ??         47h    G
        00100365 4e              ??         4Eh    N
        00100366 55              ??         55h    U
        00100367 00              ??         00h
        00100368 68              ??         68h    h
        00100369 5b              ??         5Bh    [
        0010036a 66              ??         66h    f
        0010036b c4              ??         C4h
        0010036c c1              ??         C1h
        0010036d 81              ??         81h
        0010036e f1              ??         F1h
        0010036f 66              ??         66h    f
        00100370 9d              ??         9Dh
        00100371 f6              ??         F6h
        00100372 ec              ??         ECh
        00100373 06              ??         06h
        00100374 17              ??         17h
        00100375 48              ??         48h    H
        00100376 85              ??         85h
        00100377 e0              ??         E0h
        00100378 b8              ??         B8h
        00100379 77              ??         77h    w
        0010037a 22              ??         22h    "
        0010037b fc              ??         FCh
                             //
                             // .note.ABI-tag 
                             // SHT_NOTE  [0x37c - 0x39b]
                             // ram: 0010037c-0010039b
                             //
                             DAT_0010037c                                    XREF[1]:     _elfSectionHeaders::00000110(*)  
        0010037c 04              ??         04h
        0010037d 00              ??         00h
        0010037e 00              ??         00h
        0010037f 00              ??         00h
        00100380 10              ??         10h
        00100381 00              ??         00h
        00100382 00              ??         00h
        00100383 00              ??         00h
        00100384 01              ??         01h
        00100385 00              ??         00h
        00100386 00              ??         00h
        00100387 00              ??         00h
        00100388 47              ??         47h    G
        00100389 4e              ??         4Eh    N
        0010038a 55              ??         55h    U
        0010038b 00              ??         00h
        0010038c 00              ??         00h
        0010038d 00              ??         00h
        0010038e 00              ??         00h
        0010038f 00              ??         00h
        00100390 03              ??         03h
        00100391 00              ??         00h
        00100392 00              ??         00h
        00100393 00              ??         00h
        00100394 02              ??         02h
        00100395 00              ??         00h
        00100396 00              ??         00h
        00100397 00              ??         00h
        00100398 00              ??         00h
        00100399 00              ??         00h
        0010039a 00              ??         00h
        0010039b 00              ??         00h
                             //
                             // .gnu.hash 
                             // SHT_GNU_HASH  [0x3a0 - 0x3c3]
                             // ram: 001003a0-001003c3
                             //
                             __DT_GNU_HASH                                   XREF[2]:     00103de0(*), 
                                                                                          _elfSectionHeaders::00000150(*)  
        001003a0 02 00 00 00     ddw        2h                                               GNU Hash Table - nbucket
        001003a4 12 00 00 00     ddw        12h                                              GNU Hash Table - symbase
        001003a8 01 00 00 00     ddw        1h                                               GNU Hash Table - bloom_size
        001003ac 06 00 00 00     ddw        6h                                               GNU Hash Table - bloom_shift
        001003b0 00 00 81        dq[1]                                                       GNU Hash Table - bloom
                 00 00 00 
                 00 00
        001003b8 12 00 00        ddw[2]                                                      GNU Hash Table - chains
                 00 00 00 
                 00 00
        001003c0 d1 65 ce 6d     ddw[1]                                                      GNU Hash Table - chain
                             //
                             // .dynsym 
                             // SHT_DYNSYM  [0x3c8 - 0x58f]
                             // ram: 001003c8-0010058f
                             //
                             __DT_SYMTAB                                     XREF[2]:     00103e00(*), 
                                                                                          _elfSectionHeaders::00000190(*)  
        001003c8 00 00 00        Elf64_Sy
                 00 00 00 
                 00 00 00 
                             //
                             // .dynstr 
                             // SHT_STRTAB  [0x590 - 0x686]
                             // ram: 00100590-00100686
                             //
                             __DT_STRTAB                                     XREF[2]:     00103df0(*), 
                                                                                          _elfSectionHeaders::000001d0(*)  
        00100590 00              ??         00h
        00100591 6c 69 62        ds         "libc.so.6"
                 63 2e 73 
                 6f 2e 36 00
        0010059b 65 78 69        ds         "exit"
                 74 00
        001005a0 5f 5f 69        ds         "__isoc99_scanf"
                 73 6f 63 
                 39 39 5f 
        001005af 73 69 67        ds         "signal"
                 6e 61 6c 00
        001005b6 70 75 74        ds         "puts"
                 73 00
        001005bb 5f 5f 73        ds         "__stack_chk_fail"
                 74 61 63 
                 6b 5f 63 
        001005cc 70 75 74        ds         "putchar"
                 63 68 61 
                 72 00
        001005d4 70 72 69        ds         "printf"
                 6e 74 66 00
        001005db 72 65 61        ds         "read"
                 64 00
        001005e0 73 74 64        ds         "stdout"
                 6f 75 74 00
        001005e7 73 74 64        ds         "stderr"
                 65 72 72 00
        001005ee 61 6c 61        ds         "alarm"
                 72 6d 00
        001005f4 6f 70 65        ds         "open"
                 6e 00
        001005f9 5f 5f 63        ds         "__cxa_finalize"
                 78 61 5f 
                 66 69 6e 
        00100608 73 65 74        ds         "setvbuf"
                 76 62 75 
                 66 00
        00100610 5f 5f 6c        ds         "__libc_start_main"
                 69 62 63 
                 5f 73 74 
        00100622 47 4c 49        ds         "GLIBC_2.7"
                 42 43 5f 
                 32 2e 37 00
        0010062c 47 4c 49        ds         "GLIBC_2.4"
                 42 43 5f 
                 32 2e 34 00
        00100636 47 4c 49        ds         "GLIBC_2.2.5"
                 42 43 5f 
                 32 2e 32 
        00100642 5f 49 54        ds         "_ITM_deregisterTMCloneTable"
                 4d 5f 64 
                 65 72 65 
        0010065e 5f 5f 67        ds         "__gmon_start__"
                 6d 6f 6e 
                 5f 73 74 
        0010066d 5f 49 54        ds         "_ITM_registerTMCloneTable"
                 4d 5f 72 
                 65 67 69 
                             //
                             // .gnu.version 
                             // SHT_GNU_versym  [0x688 - 0x6ad]
                             // ram: 00100688-001006ad
                             //
                             __DT_VERSYM                                     XREF[2]:     00103ef0(*), 
                                                                                          _elfSectionHeaders::00000210(*)  
        00100688 00 00           dw         0h                                               0
        0010068a 02 00           dw         2h                                               putchar
        0010068c 00 00           dw         0h                                               _ITM_deregisterTMCloneTable
        0010068e 02 00           dw         2h                                               stdout
        00100690 02 00           dw         2h                                               puts
        00100692 03 00           dw         3h                                               __stack_chk_fail
        00100694 02 00           dw         2h                                               printf
        00100696 02 00           dw         2h                                               alarm
        00100698 02 00           dw         2h                                               read
        0010069a 02 00           dw         2h                                               __libc_start_main
        0010069c 02 00           dw         2h                                               signal
        0010069e 00 00           dw         0h                                               __gmon_start__
        001006a0 02 00           dw         2h                                               setvbuf
        001006a2 02 00           dw         2h                                               open
        001006a4 04 00           dw         4h                                               __isoc99_scanf
        001006a6 02 00           dw         2h                                               exit
        001006a8 00 00           dw         0h                                               _ITM_registerTMCloneTable
        001006aa 02 00           dw         2h                                               stderr
        001006ac 02 00           dw         2h                                               __cxa_finalize
                             //
                             // .gnu.version_r 
                             // SHT_GNU_verneed  [0x6b0 - 0x6ef]
                             // ram: 001006b0-001006ef
                             //
                             __DT_VERNEED                                    XREF[2]:     00103ed0(*), 
                                                                                          _elfSectionHeaders::00000250(*)  
        001006b0 01              ??         01h
        001006b1 00              ??         00h
        001006b2 03              ??         03h
        001006b3 00              ??         00h
        001006b4 01              ??         01h
        001006b5 00              ??         00h
        001006b6 00              ??         00h                                              ?  ->  00100000
        001006b7 00              ??         00h
        001006b8 10              ??         10h
        001006b9 00              ??         00h
        001006ba 00              ??         00h
        001006bb 00              ??         00h
        001006bc 00              ??         00h
        001006bd 00              ??         00h
        001006be 00              ??         00h
        001006bf 00              ??         00h
        001006c0 17              ??         17h
        001006c1 69              ??         69h    i
        001006c2 69              ??         69h    i
        001006c3 0d              ??         0Dh
        001006c4 00              ??         00h
        001006c5 00              ??         00h
        001006c6 04              ??         04h
        001006c7 00              ??         00h
        001006c8 92              ??         92h
        001006c9 00              ??         00h
        001006ca 00              ??         00h
        001006cb 00              ??         00h
        001006cc 10              ??         10h
        001006cd 00              ??         00h
        001006ce 00              ??         00h
        001006cf 00              ??         00h
        001006d0 14              ??         14h
        001006d1 69              ??         69h    i
        001006d2 69              ??         69h    i
        001006d3 0d              ??         0Dh
        001006d4 00              ??         00h
        001006d5 00              ??         00h
        001006d6 03              ??         03h
        001006d7 00              ??         00h
        001006d8 9c              ??         9Ch
        001006d9 00              ??         00h
        001006da 00              ??         00h
        001006db 00              ??         00h
        001006dc 10              ??         10h
        001006dd 00              ??         00h
        001006de 00              ??         00h
        001006df 00              ??         00h
        001006e0 75              ??         75h    u
        001006e1 1a              ??         1Ah
        001006e2 69              ??         69h    i
        001006e3 09              ??         09h
        001006e4 00              ??         00h
        001006e5 00              ??         00h
        001006e6 02              ??         02h
        001006e7 00              ??         00h
        001006e8 a6              ??         A6h
        001006e9 00              ??         00h
        001006ea 00              ??         00h
        001006eb 00              ??         00h
        001006ec 00              ??         00h
        001006ed 00              ??         00h
        001006ee 00              ??         00h
        001006ef 00              ??         00h
                             //
                             // .rela.dyn 
                             // SHT_RELA  [0x6f0 - 0x8cf]
                             // ram: 001006f0-001008cf
                             //
                             __DT_RELA                                       XREF[2]:     00103e80(*), 
                                                                                          _elfSectionHeaders::00000290(*)  
        001006f0 58 3d 00        Elf64_Re                                                    location to apply the relocation
                 00 00 00 
                 00 00 08 
                             //
                             // .rela.plt 
                             // SHT_RELA  [0x8d0 - 0x9d7]
                             // ram: 001008d0-001009d7
                             //
                             __DT_JMPREL                                     XREF[2]:     00103e70(*), 
                                                                                          _elfSectionHeaders::000002d0(*)  
        001008d0 70 3f 00        Elf64_Re                                                    location to apply the relocation
                 00 00 00 
                 00 00 07 
                             //
                             // .init 
                             // SHT_PROGBITS  [0x1000 - 0x101a]
                             // ram: 00101000-0010101a
                             //
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined _DT_INIT()
             undefined         AL:1           <RETURN>
                             __DT_INIT                                       XREF[5]:     Entry Point(*), 001000f8(*), 
                             _DT_INIT                                                     0010183c(c), 00103d80(*), 
                                                                                          _elfSectionHeaders::00000310(*)  
        00101000 f3 0f 1e fa     ENDBR64
        00101004 48 83 ec 08     SUB        RSP,0x8
        00101008 48 8b 05        MOV        RAX=>__gmon_start__,qword ptr [->__gmon_start__] = 00105050
                 d1 2f 00 00                                                                 = ??
        0010100f 48 85 c0        TEST       RAX,RAX
        00101012 74 02           JZ         LAB_00101016
        00101014 ff d0           CALL       RAX=>__gmon_start__                              undefined __gmon_start__()
                             LAB_00101016                                    XREF[1]:     00101012(j)  
        00101016 48 83 c4 08     ADD        RSP,0x8
        0010101a c3              RET
                             //
                             // .plt 
                             // SHT_PROGBITS  [0x1020 - 0x10df]
                             // ram: 00101020-001010df
                             //
                             LAB_00101020                                    XREF[13]:    00101039(j), 00101049(j), 
                                                                                          00101059(j), 00101069(j), 
                                                                                          00101079(j), 00101089(j), 
                                                                                          00101099(j), 001010a9(j), 
                                                                                          001010b9(j), 001010c9(j), 
                                                                                          001010d9(j), 001025c0, 
                                                                                          _elfSectionHeaders::00000350(*)  
        00101020 ff 35 3a        PUSH       qword ptr [PTR_00103f60]                         = 00000000
                 2f 00 00
        00101026 f2 ff 25        JMP        qword ptr [PTR_00103f68]
                 3b 2f 00 00
        0010102d 0f              ??         0Fh
        0010102e 1f              ??         1Fh
        0010102f 00              ??         00h
        00101030 f3 0f 1e fa     ENDBR64
        00101034 68 00 00        PUSH       0x0
                 00 00
        00101039 f2 e9 e1        JMP        LAB_00101020
                 ff ff ff
        0010103f 90              NOP
        00101040 f3 0f 1e fa     ENDBR64
        00101044 68 01 00        PUSH       0x1
                 00 00
        00101049 f2 e9 d1        JMP        LAB_00101020
                 ff ff ff
        0010104f 90              NOP
        00101050 f3 0f 1e fa     ENDBR64
        00101054 68 02 00        PUSH       0x2
                 00 00
        00101059 f2 e9 c1        JMP        LAB_00101020
                 ff ff ff
        0010105f 90              NOP
        00101060 f3 0f 1e fa     ENDBR64
        00101064 68 03 00        PUSH       0x3
                 00 00
        00101069 f2 e9 b1        JMP        LAB_00101020
                 ff ff ff
        0010106f 90              NOP
        00101070 f3 0f 1e fa     ENDBR64
        00101074 68 04 00        PUSH       0x4
                 00 00
        00101079 f2 e9 a1        JMP        LAB_00101020
                 ff ff ff
        0010107f 90              NOP
        00101080 f3 0f 1e fa     ENDBR64
        00101084 68 05 00        PUSH       0x5
                 00 00
        00101089 f2 e9 91        JMP        LAB_00101020
                 ff ff ff
        0010108f 90              NOP
        00101090 f3 0f 1e fa     ENDBR64
        00101094 68 06 00        PUSH       0x6
                 00 00
        00101099 f2 e9 81        JMP        LAB_00101020
                 ff ff ff
        0010109f 90              NOP
        001010a0 f3 0f 1e fa     ENDBR64
        001010a4 68 07 00        PUSH       0x7
                 00 00
        001010a9 f2 e9 71        JMP        LAB_00101020
                 ff ff ff
        001010af 90              NOP
        001010b0 f3 0f 1e fa     ENDBR64
        001010b4 68 08 00        PUSH       0x8
                 00 00
        001010b9 f2 e9 61        JMP        LAB_00101020
                 ff ff ff
        001010bf 90              NOP
        001010c0 f3 0f 1e fa     ENDBR64
        001010c4 68 09 00        PUSH       0x9
                 00 00
        001010c9 f2 e9 51        JMP        LAB_00101020
                 ff ff ff
        001010cf 90              NOP
        001010d0 f3 0f 1e fa     ENDBR64
        001010d4 68 0a 00        PUSH       0xa
                 00 00
        001010d9 f2 e9 41        JMP        LAB_00101020
                 ff ff ff
        001010df 90              NOP
                             //
                             // .plt.got 
                             // SHT_PROGBITS  [0x10e0 - 0x10ef]
                             // ram: 001010e0-001010ef
                             //
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk undefined __cxa_finalize()
                               Thunked-Function: __cxa_finalize
             undefined         AL:1           <RETURN>
                             __cxa_finalize                                  XREF[3]:     _FINI_0:00101262(c), 001025c8, 
                                                                                          _elfSectionHeaders::00000390(*)  
        001010e0 f3 0f 1e fa     ENDBR64
        001010e4 f2 ff 25        JMP        qword ptr [->__cxa_finalize]                     undefined __cxa_finalize()
                 05 2f 00 00
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        001010eb 0f              ??         0Fh
        001010ec 1f              ??         1Fh
        001010ed 44              ??         44h    D
        001010ee 00              ??         00h
        001010ef 00              ??         00h
                             //
                             // .plt.sec 
                             // SHT_PROGBITS  [0x10f0 - 0x119f]
                             // ram: 001010f0-0010119f
                             //
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk int putchar(int __c)
                               Thunked-Function: putchar
             int               EAX:4          <RETURN>
             int               EDI:4          __c
                             putchar                                         XREF[3]:     001012e6(c), 001025d0, 
                                                                                          _elfSectionHeaders::000003d0(*)  
        001010f0 f3 0f 1e fa     ENDBR64
        001010f4 f2 ff 25        JMP        qword ptr [->putchar]                            int putchar(int __c)
                 75 2e 00 00
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        001010fb 0f              ??         0Fh
        001010fc 1f              ??         1Fh
        001010fd 44              ??         44h    D
        001010fe 00              ??         00h
        001010ff 00              ??         00h
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk int puts(char * __s)
                               Thunked-Function: puts
             int               EAX:4          <RETURN>
             char *            RDI:8          __s
                             puts                                            XREF[20]:    001012ce(c), 00101327(c), 
                                                                                          00101333(c), 001013fd(c), 
                                                                                          00101448(c), 00101483(c), 
                                                                                          00101499(c), 
                                                                                          FUN_001014b5:001014fb(c), 
                                                                                          0010162f(c), 0010163b(c), 
                                                                                          00101647(c), 0010165e(c), 
                                                                                          0010166a(c), 00101676(c), 
                                                                                          00101682(c), 0010168e(c), 
                                                                                          001016a5(c), 001016b1(c), 
                                                                                          001016bd(c), 001016c9(c)  
        00101100 f3 0f 1e fa     ENDBR64
        00101104 f2 ff 25        JMP        qword ptr [->puts]                               int puts(char * __s)
                 6d 2e 00 00
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        0010110b 0f              ??         0Fh
        0010110c 1f              ??         1Fh
        0010110d 44              ??         44h    D
        0010110e 00              ??         00h
        0010110f 00              ??         00h
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk noreturn undefined __stack_chk_fail()
                               Thunked-Function: __stack_chk_fail
             undefined         AL:1           <RETURN>
                             __stack_chk_fail                                XREF[2]:     001014ae(c), 
                                                                                          FUN_001014b5:0010151c(c)  
        00101110 f3 0f 1e fa     ENDBR64
        00101114 f2 ff 25        JMP        qword ptr [->__stack_chk_fail]                   undefined __stack_chk_fail()
                 65 2e 00 00
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        0010111b 0f              ??         0Fh
        0010111c 1f              ??         1Fh
        0010111d 44              ??         44h    D
        0010111e 00              ??         00h
        0010111f 00              ??         00h
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk int printf(char * __format, ...)
                               Thunked-Function: printf
             int               EAX:4          <RETURN>
             char *            RDI:8          __format
                             printf                                          XREF[6]:     0010143c(c), 00101558(c), 
                                                                                          00101571(c), 001015b2(c), 
                                                                                          00101608(c), 001016da(c)  
        00101120 f3 0f 1e fa     ENDBR64
        00101124 f2 ff 25        JMP        qword ptr [->printf]                             int printf(char * __format, ...)
                 5d 2e 00 00
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        0010112b 0f              ??         0Fh
        0010112c 1f              ??         1Fh
        0010112d 44              ??         44h    D
        0010112e 00              ??         00h
        0010112f 00              ??         00h
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk uint alarm(uint __seconds)
                               Thunked-Function: alarm
             uint              EAX:4          <RETURN>
             uint              EDI:4          __seconds
                             alarm                                           XREF[1]:     00101361(c)  
        00101130 f3 0f 1e fa     ENDBR64
        00101134 f2 ff 25        JMP        qword ptr [->alarm]                              uint alarm(uint __seconds)
                 55 2e 00 00
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        0010113b 0f              ??         0Fh
        0010113c 1f              ??         1Fh
        0010113d 44              ??         44h    D
        0010113e 00              ??         00h
        0010113f 00              ??         00h
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk ssize_t read(int __fd, void * __buf, size_t __nbyt
                               Thunked-Function: read
             ssize_t           RAX:8          <RETURN>
             int               EDI:4          __fd
             void *            RSI:8          __buf
             size_t            RDX:8          __nbytes
                             read                                            XREF[1]:     001012fc(c)  
        00101140 f3 0f 1e fa     ENDBR64
        00101144 f2 ff 25        JMP        qword ptr [->read]                               ssize_t read(int __fd, void * __
                 4d 2e 00 00
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        0010114b 0f              ??         0Fh
        0010114c 1f              ??         1Fh
        0010114d 44              ??         44h    D
        0010114e 00              ??         00h
        0010114f 00              ??         00h
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk __sighandler_t signal(int __sig, __sighandler_t __
                               Thunked-Function: signal
             __sighandler_t    RAX:8          <RETURN>
             int               EDI:4          __sig
             __sighandler_t    RSI:8          __handler
                             signal                                          XREF[1]:     0010134d(c)  
        00101150 f3 0f 1e fa     ENDBR64
        00101154 f2 ff 25        JMP        qword ptr [->signal]                             __sighandler_t signal(int __sig,
                 45 2e 00 00
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        0010115b 0f              ??         0Fh
        0010115c 1f              ??         1Fh
        0010115d 44              ??         44h    D
        0010115e 00              ??         00h
        0010115f 00              ??         00h
        00101160 f3              ??         F3h
        00101161 0f              ??         0Fh
        00101162 1e              ??         1Eh
        00101163 fa              ??         FAh
        00101164 f2              ??         F2h
        00101165 ff              ??         FFh
        00101166 25              ??         25h    %
        00101167 3d              ??         3Dh    =
        00101168 2e              ??         2Eh    .
        00101169 00              ??         00h
        0010116a 00              ??         00h
        0010116b 0f              ??         0Fh
        0010116c 1f              ??         1Fh
        0010116d 44              ??         44h    D
        0010116e 00              ??         00h
        0010116f 00              ??         00h
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk int open(char * __file, int __oflag, ...)
                               Thunked-Function: open
             int               EAX:4          <RETURN>
             char *            RDI:8          __file
             int               ESI:4          __oflag
                             open                                            XREF[1]:     001012b9(c)  
        00101170 f3 0f 1e fa     ENDBR64
        00101174 f2 ff 25        JMP        qword ptr [->open]                               int open(char * __file, int __of
                 35 2e 00 00
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        0010117b 0f              ??         0Fh
        0010117c 1f              ??         1Fh
        0010117d 44              ??         44h    D
        0010117e 00              ??         00h
        0010117f 00              ??         00h
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk undefined __isoc99_scanf()
                               Thunked-Function: __isoc99_scanf
             undefined         AL:1           <RETURN>
                             __isoc99_scanf                                  XREF[3]:     00101415(c), 00101460(c), 
                                                                                          FUN_001014b5:001014ea(c)  
        00101180 f3 0f 1e fa     ENDBR64
        00101184 f2 ff 25        JMP        qword ptr [->__isoc99_scanf]                     undefined __isoc99_scanf()
                 2d 2e 00 00
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        0010118b 0f              ??         0Fh
        0010118c 1f              ??         1Fh
        0010118d 44              ??         44h    D
        0010118e 00              ??         00h
        0010118f 00              ??         00h
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk noreturn void exit(int __status)
                               Thunked-Function: exit
             void              <VOID>         <RETURN>
             int               EDI:4          __status
                             exit                                            XREF[6]:     001012d8(c), 0010130c(c), 
                                                                                          00101424(c), 0010146f(c), 
                                                                                          0010148d(c), 
                                                                                          FUN_001014b5:00101505(c)  
        00101190 f3 0f 1e fa     ENDBR64
        00101194 f2 ff 25        JMP        qword ptr [->exit]                               void exit(int __status)
                 25 2e 00 00
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        0010119b 0f              ??         0Fh
        0010119c 1f              ??         1Fh
        0010119d 44              ??         44h    D
        0010119e 00              ??         00h
        0010119f 00              ??         00h
                             //
                             // .text 
                             // SHT_PROGBITS  [0x11a0 - 0x1884]
                             // ram: 001011a0-00101884
                             //
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined entry()
             undefined         AL:1           <RETURN>
             undefined8        Stack[-0x10]:8 local_10                                XREF[1]:     001011b2(*)  
                             entry                                           XREF[4]:     Entry Point(*), 00100018(*), 
                                                                                          001025d8, 
                                                                                          _elfSectionHeaders::00000410(*)  
        001011a0 f3 0f 1e fa     ENDBR64
        001011a4 31 ed           XOR        EBP,EBP
        001011a6 49 89 d1        MOV        R9,RDX
        001011a9 5e              POP        RSI
        001011aa 48 89 e2        MOV        RDX,RSP
        001011ad 48 83 e4 f0     AND        RSP,-0x10
        001011b1 50              PUSH       RAX
        001011b2 54              PUSH       RSP=>local_10
        001011b3 4c 8d 05        LEA        R8,[DAT_00101880]                                = F3h
                 c6 06 00 00
        001011ba 48 8d 0d        LEA        RCX,[LAB_00101810]
                 4f 06 00 00
        001011c1 48 8d 3d        LEA        RDI,[DAT_001016e2]                               = F3h
                 1a 05 00 00
        001011c8 ff 15 0a        CALL       qword ptr [->__libc_start_main]                  undefined __libc_start_main()
                 2e 00 00
        001011ce f4              HLT
        001011cf 90              ??         90h
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined FUN_001011d0()
             undefined         AL:1           <RETURN>
                             FUN_001011d0                                    XREF[1]:     _FINI_0:00101267(c)  
        001011d0 48 8d 3d        LEA        RDI,[DAT_00104070]                               = ??
                 99 2e 00 00
        001011d7 48 8d 05        LEA        RAX,[DAT_00104070]                               = ??
                 92 2e 00 00
        001011de 48 39 f8        CMP        RAX,RDI
        001011e1 74 15           JZ         LAB_001011f8
        001011e3 48 8b 05        MOV        RAX=>_ITM_deregisterTMCloneTable,qword ptr [->   = 00105008
                 de 2d 00 00                                                                 = ??
        001011ea 48 85 c0        TEST       RAX,RAX
        001011ed 74 09           JZ         LAB_001011f8
        001011ef ff e0           JMP        RAX=>_ITM_deregisterTMCloneTable                 undefined _ITM_deregisterTMClone
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        001011f1 0f              ??         0Fh
        001011f2 1f              ??         1Fh
        001011f3 80              ??         80h
        001011f4 00              ??         00h
        001011f5 00              ??         00h
        001011f6 00              ??         00h
        001011f7 00              ??         00h
                             LAB_001011f8                                    XREF[2]:     001011e1(j), 001011ed(j)  
        001011f8 c3              RET
        001011f9 0f              ??         0Fh
        001011fa 1f              ??         1Fh
        001011fb 80              ??         80h
        001011fc 00              ??         00h
        001011fd 00              ??         00h
        001011fe 00              ??         00h
        001011ff 00              ??         00h
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined FUN_00101200()
             undefined         AL:1           <RETURN>
                             FUN_00101200                                    XREF[1]:     _INIT_0:00101280(T), 
                                                                                          _INIT_0:00101284(c)  
        00101200 48 8d 3d        LEA        RDI,[DAT_00104070]                               = ??
                 69 2e 00 00
        00101207 48 8d 35        LEA        RSI,[DAT_00104070]                               = ??
                 62 2e 00 00
        0010120e 48 29 fe        SUB        RSI,RDI
        00101211 48 89 f0        MOV        RAX,RSI
        00101214 48 c1 ee 3f     SHR        RSI,0x3f
        00101218 48 c1 f8 03     SAR        RAX,0x3
        0010121c 48 01 c6        ADD        RSI,RAX
        0010121f 48 d1 fe        SAR        RSI,1
        00101222 74 14           JZ         LAB_00101238
        00101224 48 8b 05        MOV        RAX=>_ITM_registerTMCloneTable,qword ptr [->_I   = 00105078
                 bd 2d 00 00                                                                 = ??
        0010122b 48 85 c0        TEST       RAX,RAX
        0010122e 74 08           JZ         LAB_00101238
        00101230 ff e0           JMP        RAX=>_ITM_registerTMCloneTable                   undefined _ITM_registerTMCloneTa
                             -- Flow Override: CALL_RETURN (COMPUTED_CALL_TERMINATOR)
        00101232 66              ??         66h    f
        00101233 0f              ??         0Fh
        00101234 1f              ??         1Fh
        00101235 44              ??         44h    D
        00101236 00              ??         00h
        00101237 00              ??         00h
                             LAB_00101238                                    XREF[2]:     00101222(j), 0010122e(j)  
        00101238 c3              RET
        00101239 0f              ??         0Fh
        0010123a 1f              ??         1Fh
        0010123b 80              ??         80h
        0010123c 00              ??         00h
        0010123d 00              ??         00h
        0010123e 00              ??         00h
        0010123f 00              ??         00h
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined _FINI_0()
             undefined         AL:1           <RETURN>
                             _FINI_0                                         XREF[3]:     Entry Point(*), 00101859(c), 
                                                                                          00103d60(*)  
        00101240 f3 0f 1e fa     ENDBR64
        00101244 80 3d 25        CMP        byte ptr [DAT_00104070],0x0                      = ??
                 2e 00 00 00
        0010124b 75 2b           JNZ        LAB_00101278
        0010124d 55              PUSH       RBP
        0010124e 48 83 3d        CMP        qword ptr [->__cxa_finalize],0x0                 = 00105088
                 9a 2d 00 
                 00 00
        00101256 48 89 e5        MOV        RBP,RSP
        00101259 74 0c           JZ         LAB_00101267
        0010125b 48 8b 3d        MOV        RDI,qword ptr [PTR_LOOP_00104008]                = 00104008
                 a6 2d 00 00
        00101262 e8 79 fe        CALL       __cxa_finalize                                   undefined __cxa_finalize()
                 ff ff
                             LAB_00101267                                    XREF[1]:     00101259(j)  
        00101267 e8 64 ff        CALL       FUN_001011d0                                     undefined FUN_001011d0()
                 ff ff
        0010126c c6 05 fd        MOV        byte ptr [DAT_00104070],0x1                      = ??
                 2d 00 00 01
        00101273 5d              POP        RBP
        00101274 c3              RET
        00101275 0f              ??         0Fh
        00101276 1f              ??         1Fh
        00101277 00              ??         00h
                             LAB_00101278                                    XREF[1]:     0010124b(j)  
        00101278 c3              RET
        00101279 0f              ??         0Fh
        0010127a 1f              ??         1Fh
        0010127b 80              ??         80h
        0010127c 00              ??         00h
        0010127d 00              ??         00h
        0010127e 00              ??         00h
        0010127f 00              ??         00h
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk undefined _INIT_0()
                               Thunked-Function: FUN_00101200
             undefined         AL:1           <RETURN>
                             _INIT_0                                         XREF[3]:     Entry Point(*), 00101859(c), 
                                                                                          00103d58(*)  
        00101280 f3 0f 1e fa     ENDBR64
        00101284 e9 77 ff        JMP        FUN_00101200                                     undefined FUN_00101200()
                 ff ff
                             -- Flow Override: CALL_RETURN (CALL_TERMINATOR)
                             LAB_00101289                                    XREF[1]:     001025e0  
        00101289 f3 0f 1e fa     ENDBR64
        0010128d 55              PUSH       RBP
        0010128e 48 89 e5        MOV        RBP,RSP
        00101291 48 83 ec 10     SUB        RSP,0x10
        00101295 64 48 8b        MOV        RAX,qword ptr FS:[0x28]
                 04 25 28 
                 00 00 00
        0010129e 48 89 45 f8     MOV        qword ptr [RBP + -0x8],RAX
        001012a2 31 c0           XOR        EAX,EAX
        001012a4 c6 45 f3 00     MOV        byte ptr [RBP + -0xd],0x0
        001012a8 be 00 00        MOV        ESI,0x0
                 00 00
        001012ad 48 8d 3d        LEA        RDI,[s_./flag.txt_0010222e]                      = "./flag.txt"
                 7a 0f 00 00
        001012b4 b8 00 00        MOV        EAX,0x0
                 00 00
        001012b9 e8 b2 fe        CALL       open                                             int open(char * __file, int __of
                 ff ff
        001012be 89 45 f4        MOV        dword ptr [RBP + -0xc],EAX
        001012c1 83 7d f4 ff     CMP        dword ptr [RBP + -0xc],-0x1
        001012c5 75 24           JNZ        LAB_001012eb
        001012c7 48 8d 3d        LEA        RDI,[s_Error_opening_flag.txt_00102239]          = "Error opening flag.txt"
                 6b 0f 00 00
        001012ce e8 2d fe        CALL       puts                                             int puts(char * __s)
                 ff ff
        001012d3 bf 01 00        MOV        EDI,0x1
                 00 00
        001012d8 e8 b3 fe        CALL       exit                                             void exit(int __status)
                 ff ff
                             -- Flow Override: CALL_RETURN (CALL_TERMINATOR)
                             LAB_001012dd                                    XREF[1]:     00101305(j)  
        001012dd 0f b6 45 f3     MOVZX      EAX,byte ptr [RBP + -0xd]
        001012e1 0f be c0        MOVSX      EAX,AL
        001012e4 89 c7           MOV        EDI,EAX
        001012e6 e8 05 fe        CALL       putchar                                          int putchar(int __c)
                 ff ff
                             LAB_001012eb                                    XREF[1]:     001012c5(j)  
        001012eb 48 8d 4d f3     LEA        RCX,[RBP + -0xd]
        001012ef 8b 45 f4        MOV        EAX,dword ptr [RBP + -0xc]
        001012f2 ba 01 00        MOV        EDX,0x1
                 00 00
        001012f7 48 89 ce        MOV        RSI,RCX
        001012fa 89 c7           MOV        EDI,EAX
        001012fc e8 3f fe        CALL       read                                             ssize_t read(int __fd, void * __
                 ff ff
        00101301 48 83 f8 01     CMP        RAX,0x1
        00101305 74 d6           JZ         LAB_001012dd
        00101307 bf 00 00        MOV        EDI,0x0
                 00 00
        0010130c e8 7f fe        CALL       exit                                             void exit(int __status)
                 ff ff
                             -- Flow Override: CALL_RETURN (CALL_TERMINATOR)
                             LAB_00101311                                    XREF[1]:     001025e8  
        00101311 f3 0f 1e fa     ENDBR64
        00101315 55              PUSH       RBP
        00101316 48 89 e5        MOV        RBP,RSP
        00101319 48 83 ec 10     SUB        RSP,0x10
        0010131d 89 7d fc        MOV        dword ptr [RBP + -0x4],EDI
        00101320 48 8d 3d        LEA        RDI,[s_Hey,_you_are_taking_too_long_00102250]    = "Hey, you are taking too long"
                 29 0f 00 00
        00101327 e8 d4 fd        CALL       puts                                             int puts(char * __s)
                 ff ff
        0010132c 48 8d 3d        LEA        RDI,[s_I'm_only_going_to_warn_you_once._001022   = "I'm only going to warn you on
                 3d 0f 00 00
        00101333 e8 c8 fd        CALL       puts                                             int puts(char * __s)
                 ff ff
        00101338 48 8d 05        LEA        RAX,[DAT_00104078]                               = ??
                 39 2d 00 00
        0010133f 48 8b 00        MOV        RAX=>DAT_00104078,qword ptr [RAX]                = ??
        00101342 48 8b 00        MOV        RAX,qword ptr [RAX]
        00101345 48 89 c6        MOV        RSI,RAX
        00101348 bf 0e 00        MOV        EDI,0xe
                 00 00
        0010134d e8 fe fd        CALL       signal                                           __sighandler_t signal(int __sig,
                 ff ff
        00101352 48 8d 05        LEA        RAX,[DAT_00104078]                               = ??
                 1f 2d 00 00
        00101359 48 8b 00        MOV        RAX=>DAT_00104078,qword ptr [RAX]                = ??
        0010135c 8b 40 08        MOV        EAX,dword ptr [RAX + 0x8]
        0010135f 89 c7           MOV        EDI,EAX
        00101361 e8 ca fd        CALL       alarm                                            uint alarm(uint __seconds)
                 ff ff
        00101366 90              NOP
        00101367 c9              LEAVE
        00101368 c3              RET
                             LAB_00101369                                    XREF[3]:     0010159c(*), 001015a3(*), 
                                                                                          001025f0  
        00101369 f3 0f 1e fa     ENDBR64
        0010136d 55              PUSH       RBP
        0010136e 48 89 e5        MOV        RBP,RSP
        00101371 48 83 c4 80     ADD        RSP,-0x80
        00101375 64 48 8b        MOV        RAX,qword ptr FS:[0x28]
                 04 25 28 
                 00 00 00
        0010137e 48 89 45 f8     MOV        qword ptr [RBP + -0x8],RAX
        00101382 31 c0           XOR        EAX,EAX
        00101384 48 c7 45        MOV        qword ptr [RBP + -0x70],0x0
                 90 00 00 
                 00 00
        0010138c 48 c7 45        MOV        qword ptr [RBP + -0x68],0x0
                 98 00 00 
                 00 00
        00101394 48 c7 45        MOV        qword ptr [RBP + -0x60],0x0
                 a0 00 00 
                 00 00
        0010139c 48 c7 45        MOV        qword ptr [RBP + -0x58],0x0
                 a8 00 00 
                 00 00
        001013a4 48 c7 45        MOV        qword ptr [RBP + -0x50],0x0
                 b0 00 00 
                 00 00
        001013ac 48 c7 45        MOV        qword ptr [RBP + -0x48],0x0
                 b8 00 00 
                 00 00
        001013b4 48 c7 45        MOV        qword ptr [RBP + -0x40],0x0
                 c0 00 00 
                 00 00
        001013bc 48 c7 45        MOV        qword ptr [RBP + -0x38],0x0
                 c8 00 00 
                 00 00
        001013c4 48 c7 45        MOV        qword ptr [RBP + -0x30],0x0
                 d0 00 00 
                 00 00
        001013cc 48 c7 45        MOV        qword ptr [RBP + -0x28],0x0
                 d8 00 00 
                 00 00
        001013d4 48 c7 45        MOV        qword ptr [RBP + -0x20],0x0
                 e0 00 00 
                 00 00
        001013dc 48 c7 45        MOV        qword ptr [RBP + -0x18],0x0
                 e8 00 00 
                 00 00
        001013e4 c7 45 f0        MOV        dword ptr [RBP + -0x10],0x0
                 00 00 00 00
        001013eb c7 45 8c        MOV        dword ptr [RBP + -0x74],0x0
                 00 00 00 00
        001013f2 c6 45 8b 00     MOV        byte ptr [RBP + -0x75],0x0
        001013f6 48 8d 3d        LEA        RDI,[s_Enter_test_data_00102293]                 = "Enter test data"
                 96 0e 00 00
        001013fd e8 fe fc        CALL       puts                                             int puts(char * __s)
                 ff ff
        00101402 48 8d 45 90     LEA        RAX,[RBP + -0x70]
        00101406 48 89 c6        MOV        RSI,RAX
        00101409 48 8d 3d        LEA        RDI,[DAT_001022a3]                               = 20h     
                 93 0e 00 00
        00101410 b8 00 00        MOV        EAX,0x0
                 00 00
        00101415 e8 66 fd        CALL       __isoc99_scanf                                   undefined __isoc99_scanf()
                 ff ff
        0010141a 83 f8 01        CMP        EAX,0x1
        0010141d 74 0a           JZ         LAB_00101429
        0010141f bf 01 00        MOV        EDI,0x1
                 00 00
        00101424 e8 67 fd        CALL       exit                                             void exit(int __status)
                 ff ff
                             -- Flow Override: CALL_RETURN (CALL_TERMINATOR)
                             LAB_00101429                                    XREF[1]:     0010141d(j)  
        00101429 48 8d 45 90     LEA        RAX,[RBP + -0x70]
        0010142d 48 89 c6        MOV        RSI,RAX
        00101430 48 8d 3d        LEA        RDI,[s_Received_test_data:_%s_001022a7]          = "Received test data: %s\n"
                 70 0e 00 00
        00101437 b8 00 00        MOV        EAX,0x0
                 00 00
        0010143c e8 df fc        CALL       printf                                           int printf(char * __format, ...)
                 ff ff
        00101441 48 8d 3d        LEA        RDI,[s_Does_it_match_(y/n)?_001022bf]            = "Does it match (y/n)?"
                 77 0e 00 00
        00101448 e8 b3 fc        CALL       puts                                             int puts(char * __s)
                 ff ff
        0010144d 48 8d 45 8b     LEA        RAX,[RBP + -0x75]
        00101451 48 89 c6        MOV        RSI,RAX
        00101454 48 8d 3d        LEA        RDI,[DAT_001022d4]                               = 20h     
                 79 0e 00 00
        0010145b b8 00 00        MOV        EAX,0x0
                 00 00
        00101460 e8 1b fd        CALL       __isoc99_scanf                                   undefined __isoc99_scanf()
                 ff ff
        00101465 83 f8 01        CMP        EAX,0x1
        00101468 74 0a           JZ         LAB_00101474
        0010146a bf 01 00        MOV        EDI,0x1
                 00 00
        0010146f e8 1c fd        CALL       exit                                             void exit(int __status)
                 ff ff
                             -- Flow Override: CALL_RETURN (CALL_TERMINATOR)
                             LAB_00101474                                    XREF[1]:     00101468(j)  
        00101474 0f b6 45 8b     MOVZX      EAX,byte ptr [RBP + -0x75]
        00101478 3c 79           CMP        AL,0x79
        0010147a 74 16           JZ         LAB_00101492
        0010147c 48 8d 3d        LEA        RDI,[s_Uh-oh!_Alert_your_local_data_sci_001022   = "Uh-oh! Alert your local data 
                 55 0e 00 00
        00101483 e8 78 fc        CALL       puts                                             int puts(char * __s)
                 ff ff
        00101488 bf 01 00        MOV        EDI,0x1
                 00 00
        0010148d e8 fe fc        CALL       exit                                             void exit(int __status)
                 ff ff
                             -- Flow Override: CALL_RETURN (CALL_TERMINATOR)
                             LAB_00101492                                    XREF[1]:     0010147a(j)  
        00101492 48 8d 3d        LEA        RDI,[s_Program_operating_normally_00102300]      = "Program operating normally\n"
                 67 0e 00 00
        00101499 e8 62 fc        CALL       puts                                             int puts(char * __s)
                 ff ff
        0010149e 90              NOP
        0010149f 48 8b 45 f8     MOV        RAX,qword ptr [RBP + -0x8]
        001014a3 64 48 33        XOR        RAX,qword ptr FS:[0x28]
                 04 25 28 
                 00 00 00
        001014ac 74 05           JZ         LAB_001014b3
        001014ae e8 5d fc        CALL       __stack_chk_fail                                 undefined __stack_chk_fail()
                 ff ff
                             -- Flow Override: CALL_RETURN (CALL_TERMINATOR)
                             LAB_001014b3                                    XREF[1]:     001014ac(j)  
        001014b3 c9              LEAVE
        001014b4 c3              RET
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined FUN_001014b5()
             undefined         AL:1           <RETURN>
             undefined8        Stack[-0x10]:8 local_10                                XREF[2]:     001014ca(W), 
                                                                                                   0010150d(R)  
             undefined4        Stack[-0x14]:4 local_14                                XREF[3]:     001014d0(W), 
                                                                                                   001014d7(*), 
                                                                                                   0010150a(R)  
                             FUN_001014b5                                    XREF[3]:     0010155d(c), 00101576(c), 
                                                                                          001025f8  
        001014b5 f3 0f 1e fa     ENDBR64
        001014b9 55              PUSH       RBP
        001014ba 48 89 e5        MOV        RBP,RSP
        001014bd 48 83 ec 10     SUB        RSP,0x10
        001014c1 64 48 8b        MOV        RAX,qword ptr FS:[0x28]
                 04 25 28 
                 00 00 00
        001014ca 48 89 45 f8     MOV        qword ptr [RBP + local_10],RAX
        001014ce 31 c0           XOR        EAX,EAX
        001014d0 c7 45 f4        MOV        dword ptr [RBP + local_14],0x0
                 00 00 00 00
        001014d7 48 8d 45 f4     LEA        RAX=>local_14,[RBP + -0xc]
        001014db 48 89 c6        MOV        RSI,RAX
        001014de 48 8d 3d        LEA        RDI,[DAT_0010231c]                               = 25h    %
                 37 0e 00 00
        001014e5 b8 00 00        MOV        EAX,0x0
                 00 00
        001014ea e8 91 fc        CALL       __isoc99_scanf                                   undefined __isoc99_scanf()
                 ff ff
        001014ef 83 f8 01        CMP        EAX,0x1
        001014f2 74 16           JZ         LAB_0010150a
        001014f4 48 8d 3d        LEA        RDI,[s_You've_lost_my_trust..._0010231f]         = "You've lost my trust..."
                 24 0e 00 00
        001014fb e8 00 fc        CALL       puts                                             int puts(char * __s)
                 ff ff
        00101500 bf 01 00        MOV        EDI,0x1
                 00 00
        00101505 e8 86 fc        CALL       exit                                             void exit(int __status)
                 ff ff
                             -- Flow Override: CALL_RETURN (CALL_TERMINATOR)
                             LAB_0010150a                                    XREF[1]:     001014f2(j)  
        0010150a 8b 45 f4        MOV        EAX,dword ptr [RBP + local_14]
        0010150d 48 8b 55 f8     MOV        RDX,qword ptr [RBP + local_10]
        00101511 64 48 33        XOR        RDX,qword ptr FS:[0x28]
                 14 25 28 
                 00 00 00
        0010151a 74 05           JZ         LAB_00101521
        0010151c e8 ef fb        CALL       __stack_chk_fail                                 undefined __stack_chk_fail()
                 ff ff
                             -- Flow Override: CALL_RETURN (CALL_TERMINATOR)
                             LAB_00101521                                    XREF[1]:     0010151a(j)  
        00101521 c9              LEAVE
        00101522 c3              RET
                             LAB_00101523                                    XREF[1]:     00102600  
        00101523 f3 0f 1e fa     ENDBR64
        00101527 55              PUSH       RBP
        00101528 48 89 e5        MOV        RBP,RSP
        0010152b 48 83 ec 20     SUB        RSP,0x20
        0010152f c7 45 ec        MOV        dword ptr [RBP + -0x14],0x0
                 00 00 00 00
        00101536 c7 45 f0        MOV        dword ptr [RBP + -0x10],0x0
                 00 00 00 00
        0010153d c7 45 f4        MOV        dword ptr [RBP + -0xc],0x0
                 00 00 00 00
        00101544 48 c7 45        MOV        qword ptr [RBP + -0x8],0x0
                 f8 00 00 
                 00 00
        0010154c 48 8d 3d        LEA        RDI,[s_Enter_first_forecast_parameter_(_001023   = "Enter first forecast paramete
                 e5 0d 00 00
        00101553 b8 00 00        MOV        EAX,0x0
                 00 00
        00101558 e8 c3 fb        CALL       printf                                           int printf(char * __format, ...)
                 ff ff
        0010155d e8 53 ff        CALL       FUN_001014b5                                     undefined FUN_001014b5()
                 ff ff
        00101562 89 45 ec        MOV        dword ptr [RBP + -0x14],EAX
        00101565 48 8d 3d        LEA        RDI,[s_Enter_second_forecast_parameter_(_00102   = "Enter second forecast paramet
                 fc 0d 00 00
        0010156c b8 00 00        MOV        EAX,0x0
                 00 00
        00101571 e8 aa fb        CALL       printf                                           int printf(char * __format, ...)
                 ff ff
        00101576 e8 3a ff        CALL       FUN_001014b5                                     undefined FUN_001014b5()
                 ff ff
        0010157b 89 45 f0        MOV        dword ptr [RBP + -0x10],EAX
        0010157e 8b 45 ec        MOV        EAX,dword ptr [RBP + -0x14]
        00101581 33 45 f0        XOR        EAX,dword ptr [RBP + -0x10]
        00101584 89 45 f4        MOV        dword ptr [RBP + -0xc],EAX
        00101587 83 7d ec 00     CMP        dword ptr [RBP + -0x14],0x0
        0010158b 7e 2c           JLE        LAB_001015b9
        0010158d 83 7d f0 00     CMP        dword ptr [RBP + -0x10],0x0
        00101591 79 26           JNS        LAB_001015b9
        00101593 81 7d f4        CMP        dword ptr [RBP + -0xc],0xc0c0c0c0
                 c0 c0 c0 c0
        0010159a 75 1d           JNZ        LAB_001015b9
        0010159c 48 8d 05        LEA        RAX,[LAB_00101369]
                 c6 fd ff ff
        001015a3 48 89 c6        MOV        RSI=>LAB_00101369,RAX
        001015a6 48 8d 3d        LEA        RDI,[DAT_00102394]                               = 25h    %
                 e7 0d 00 00
        001015ad b8 00 00        MOV        EAX,0x0
                 00 00
        001015b2 e8 69 fb        CALL       printf                                           int printf(char * __format, ...)
                 ff ff
        001015b7 eb 55           JMP        LAB_0010160e
                             LAB_001015b9                                    XREF[3]:     0010158b(j), 00101591(j), 
                                                                                          0010159a(j)  
        001015b9 8b 4d f4        MOV        ECX,dword ptr [RBP + -0xc]
        001015bc 48 63 c1        MOVSXD     RAX,ECX
        001015bf 48 69 c0        IMUL       RAX,RAX,0x66666667
                 67 66 66 66
        001015c6 48 c1 e8 20     SHR        RAX,0x20
        001015ca 89 c2           MOV        EDX,EAX
        001015cc c1 fa 02        SAR        EDX,0x2
        001015cf 89 c8           MOV        EAX,ECX
        001015d1 c1 f8 1f        SAR        EAX,0x1f
        001015d4 29 c2           SUB        EDX,EAX
        001015d6 89 d0           MOV        EAX,EDX
        001015d8 c1 e0 02        SHL        EAX,0x2
        001015db 01 d0           ADD        EAX,EDX
        001015dd 01 c0           ADD        EAX,EAX
        001015df 29 c1           SUB        ECX,EAX
        001015e1 89 ca           MOV        EDX,ECX
        001015e3 48 8d 05        LEA        RAX,[PTR_s_will_attack_a_McDonald's_employe_00   = 00102008
                 36 2a 00 00
        001015ea 48 63 d2        MOVSXD     RDX,EDX
        001015ed 48 8b 04 d0     MOV        RAX=>PTR_s_will_attack_a_McDonald's_employe_00   = 00102008
        001015f1 48 89 45 f8     MOV        qword ptr [RBP + -0x8],RAX
        001015f5 48 8b 45 f8     MOV        RAX,qword ptr [RBP + -0x8]
        001015f9 48 89 c6        MOV        RSI,RAX
        001015fc 48 8d 3d        LEA        RDI,[s__A_Florida_man_%s_00102398]               = "\nA Florida man %s\n\n"
                 95 0d 00 00
        00101603 b8 00 00        MOV        EAX,0x0
                 00 00
        00101608 e8 13 fb        CALL       printf                                           int printf(char * __format, ...)
                 ff ff
        0010160d 90              NOP
                             LAB_0010160e                                    XREF[1]:     001015b7(j)  
        0010160e 90              NOP
        0010160f c9              LEAVE
        00101610 c3              RET
                             LAB_00101611                                    XREF[1]:     00102608  
        00101611 f3 0f 1e fa     ENDBR64
        00101615 55              PUSH       RBP
        00101616 48 89 e5        MOV        RBP,RSP
        00101619 48 83 ec 10     SUB        RSP,0x10
        0010161d 48 8d 05        LEA        RAX,[s_============================_001023ac]    = "============================"
                 88 0d 00 00
        00101624 48 89 45 f8     MOV        qword ptr [RBP + -0x8],RAX=>s_================   = "============================"
        00101628 48 8b 45 f8     MOV        RAX,qword ptr [RBP + -0x8]
        0010162c 48 89 c7        MOV        RDI=>s_============================_001023ac,RAX = "============================"
        0010162f e8 cc fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        00101634 48 8d 3d        LEA        RDI,[s_FLORIDA_MAN_FORECAST_MACHINE_001023c9]    = "FLORIDA MAN FORECAST MACHINE"
                 8e 0d 00 00
        0010163b e8 c0 fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        00101640 48 8b 45 f8     MOV        RAX,qword ptr [RBP + -0x8]
        00101644 48 89 c7        MOV        RDI=>s_============================_001023ac,RAX = "============================"
        00101647 e8 b4 fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        0010164c 90              NOP
        0010164d c9              LEAVE
        0010164e c3              RET
                             LAB_0010164f                                    XREF[1]:     00102610  
        0010164f f3 0f 1e fa     ENDBR64
        00101653 55              PUSH       RBP
        00101654 48 89 e5        MOV        RBP,RSP
        00101657 48 8d 3d        LEA        RDI,[s_Concerned_about_how_Florida_Man_m_00102   = "Concerned about how Florida M
                 8a 0d 00 00
        0010165e e8 9d fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        00101663 48 8d 3d        LEA        RDI,[s_Our_proprietary_machine_learning_001024   = "Our proprietary machine learn
                 d6 0d 00 00
        0010166a e8 91 fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        0010166f 48 8d 3d        LEA        RDI,[s_informing_you_what_to_expect_dur_001024   = "informing you what to expect 
                 32 0e 00 00
        00101676 e8 85 fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        0010167b 48 8d 3d        LEA        RDI,[s_If_you_doubt_your_forecasts,_fee_001024   = "If you doubt your forecasts, 
                 6e 0e 00 00
        00101682 e8 79 fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        00101687 48 8d 3d        LEA        RDI,[s__*_Hey,_Rob,_you_automated_those_001025   = "\n* Hey, Rob, you automated t
                 aa 0e 00 00
        0010168e e8 6d fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        00101693 90              NOP
        00101694 5d              POP        RBP
        00101695 c3              RET
                             LAB_00101696                                    XREF[1]:     00102618  
        00101696 f3 0f 1e fa     ENDBR64
        0010169a 55              PUSH       RBP
        0010169b 48 89 e5        MOV        RBP,RSP
        0010169e 48 8d 3d        LEA        RDI,[s_1)_Help_00102567]                         = "1) Help"
                 c2 0e 00 00
        001016a5 e8 56 fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        001016aa 48 8d 3d        LEA        RDI,[s_2)_Test_processing_unit_0010256f]         = "2) Test processing unit"
                 be 0e 00 00
        001016b1 e8 4a fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        001016b6 48 8d 3d        LEA        RDI,[s_3)_Forecast_00102587]                     = "3) Forecast"
                 ca 0e 00 00
        001016bd e8 3e fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        001016c2 48 8d 3d        LEA        RDI,[s_4)_Exit_00102593]                         = "4) Exit"
                 ca 0e 00 00
        001016c9 e8 32 fa        CALL       puts                                             int puts(char * __s)
                 ff ff
        001016ce 48 8d 3d        LEA        RDI,[s__Choice:_0010259b]                        = "\nChoice: "
                 c6 0e 00 00
        001016d5 b8 00 00        MOV        EAX,0x0
                 00 00
        001016da e8 41 fa        CALL       printf                                           int printf(char * __format, ...)
                 ff ff
        001016df 90              NOP
        001016e0 5d              POP        RBP
        001016e1 c3              RET
                             DAT_001016e2                                    XREF[2]:     entry:001011c1(*), 00102620  
        001016e2 f3              ??         F3h
        001016e3 0f              ??         0Fh
        001016e4 1e              ??         1Eh
        001016e5 fa              ??         FAh
        001016e6 55              ??         55h    U
        001016e7 48              ??         48h    H
        001016e8 89              ??         89h
        001016e9 e5              ??         E5h
        001016ea 48              ??         48h    H
        001016eb 83              ??         83h
        001016ec ec              ??         ECh
        001016ed 30              ??         30h    0
        001016ee 64              ??         64h    d
        001016ef 48              ??         48h    H
        001016f0 8b              ??         8Bh
        001016f1 04              ??         04h
        001016f2 25              ??         25h    %
        001016f3 28              ??         28h    (
        001016f4 00              ??         00h
        001016f5 00              ??         00h
        001016f6 00              ??         00h
        001016f7 48              ??         48h    H
        001016f8 89              ??         89h
        001016f9 45              ??         45h    E
        001016fa f8              ??         F8h
        001016fb 31              ??         31h    1
        001016fc c0              ??         C0h
        001016fd 48              ??         48h    H
        001016fe c7              ??         C7h
        001016ff 45              ??         45h    E
        00101700 e0              ??         E0h
        00101701 00              ??         00h
        00101702 00              ??         00h
        00101703 00              ??         00h
        00101704 00              ??         00h
        00101705 c7              ??         C7h
        00101706 45              ??         45h    E
        00101707 e8              ??         E8h
        00101708 05              ??         05h
        00101709 00              ??         00h
        0010170a 00              ??         00h
        0010170b 00              ??         00h
        0010170c c6              ??         C6h
        0010170d 45              ??         45h    E
        0010170e df              ??         DFh
        0010170f 00              ??         00h
        00101710 48              ??         48h    H
        00101711 8b              ??         8Bh
        00101712 05              ??         05h
        00101713 b9              ??         B9h
        00101714 28              ??         28h    (
        00101715 00              ??         00h
        00101716 00              ??         00h
        00101717 48              ??         48h    H
        00101718 8b              ??         8Bh
        00101719 00              ??         00h
        0010171a b9              ??         B9h
        0010171b 00              ??         00h
        0010171c 00              ??         00h
        0010171d 00              ??         00h
        0010171e 00              ??         00h
        0010171f ba              ??         BAh
        00101720 02              ??         02h
        00101721 00              ??         00h
        00101722 00              ??         00h
        00101723 00              ??         00h
        00101724 be              ??         BEh
        00101725 00              ??         00h
        00101726 00              ??         00h
        00101727 00              ??         00h
        00101728 00              ??         00h
        00101729 48              ??         48h    H
        0010172a 89              ??         89h
        0010172b c7              ??         C7h
        0010172c e8              ??         E8h
        0010172d 2f              ??         2Fh    /
        0010172e fa              ??         FAh
        0010172f ff              ??         FFh
        00101730 ff              ??         FFh
        00101731 48              ??         48h    H
        00101732 8b              ??         8Bh
        00101733 05              ??         05h
        00101734 c0              ??         C0h
        00101735 28              ??         28h    (
        00101736 00              ??         00h
        00101737 00              ??         00h
        00101738 48              ??         48h    H
        00101739 8b              ??         8Bh
        0010173a 00              ??         00h
        0010173b b9              ??         B9h
        0010173c 00              ??         00h
        0010173d 00              ??         00h
        0010173e 00              ??         00h
        0010173f 00              ??         00h
        00101740 ba              ??         BAh
        00101741 02              ??         02h
        00101742 00              ??         00h
        00101743 00              ??         00h
        00101744 00              ??         00h
        00101745 be              ??         BEh
        00101746 00              ??         00h
        00101747 00              ??         00h
        00101748 00              ??         00h
        00101749 00              ??         00h
        0010174a 48              ??         48h    H
        0010174b 89              ??         89h
        0010174c c7              ??         C7h
        0010174d e8              ??         E8h
        0010174e 0e              ??         0Eh
        0010174f fa              ??         FAh
        00101750 ff              ??         FFh
        00101751 ff              ??         FFh
        00101752 48              ??         48h    H
        00101753 8d              ??         8Dh
        00101754 05              ??         05h
        00101755 1f              ??         1Fh
        00101756 29              ??         29h    )
        00101757 00              ??         00h
        00101758 00              ??         00h
        00101759 48              ??         48h    H
        0010175a 8d              ??         8Dh
        0010175b 55              ??         55h    U
        0010175c e0              ??         E0h
        0010175d 48              ??         48h    H
        0010175e 89              ??         89h
        0010175f 10              ??         10h
        00101760 48              ??         48h    H
        00101761 8d              ??         8Dh
        00101762 05              ??         05h
        00101763 aa              ??         AAh
        00101764 fb              ??         FBh
        00101765 ff              ??         FFh
        00101766 ff              ??         FFh
        00101767 48              ??         48h    H
        00101768 89              ??         89h
        00101769 c6              ??         C6h
        0010176a bf              ??         BFh
        0010176b 0e              ??         0Eh
        0010176c 00              ??         00h
        0010176d 00              ??         00h
        0010176e 00              ??         00h
        0010176f e8              ??         E8h
        00101770 dc              ??         DCh
        00101771 f9              ??         F9h
        00101772 ff              ??         FFh
        00101773 ff              ??         FFh
        00101774 48              ??         48h    H
        00101775 89              ??         89h
        00101776 45              ??         45h    E
        00101777 e0              ??         E0h
        00101778 e8              ??         E8h
        00101779 94              ??         94h
        0010177a fe              ??         FEh
        0010177b ff              ??         FFh
        0010177c ff              ??         FFh
        0010177d bf              ??         BFh
        0010177e 1e              ??         1Eh
        0010177f 00              ??         00h
        00101780 00              ??         00h
        00101781 00              ??         00h
        00101782 e8              ??         E8h
        00101783 a9              ??         A9h
        00101784 f9              ??         F9h
        00101785 ff              ??         FFh
        00101786 ff              ??         FFh
        00101787 e8              ??         E8h
        00101788 0a              ??         0Ah
        00101789 ff              ??         FFh
        0010178a ff              ??         FFh
        0010178b ff              ??         FFh
        0010178c 48              ??         48h    H
        0010178d 8d              ??         8Dh
        0010178e 45              ??         45h    E
        0010178f df              ??         DFh
        00101790 48              ??         48h    H
        00101791 89              ??         89h
        00101792 c6              ??         C6h
        00101793 48              ??         48h    H
        00101794 8d              ??         8Dh
        00101795 3d              ??         3Dh    =
        00101796 3a              ??         3Ah    :
        00101797 0b              ??         0Bh
        00101798 00              ??         00h
        00101799 00              ??         00h
        0010179a b8              ??         B8h
        0010179b 00              ??         00h
        0010179c 00              ??         00h
        0010179d 00              ??         00h
        0010179e 00              ??         00h
        0010179f e8              ??         E8h
        001017a0 dc              ??         DCh
        001017a1 f9              ??         F9h
        001017a2 ff              ??         FFh
        001017a3 ff              ??         FFh
        001017a4 83              ??         83h
        001017a5 f8              ??         F8h
        001017a6 01              ??         01h
        001017a7 74              ??         74h    t
        001017a8 0a              ??         0Ah
        001017a9 bf              ??         BFh
        001017aa 01              ??         01h
        001017ab 00              ??         00h
        001017ac 00              ??         00h
        001017ad 00              ??         00h
        001017ae e8              ??         E8h
        001017af dd              ??         DDh
        001017b0 f9              ??         F9h
        001017b1 ff              ??         FFh
        001017b2 ff              ??         FFh
        001017b3 0f              ??         0Fh
        001017b4 b6              ??         B6h
        001017b5 45              ??         45h    E
        001017b6 df              ??         DFh
        001017b7 0f              ??         0Fh
        001017b8 be              ??         BEh
        001017b9 c0              ??         C0h
        001017ba 83              ??         83h
        001017bb f8              ??         F8h
        001017bc 34              ??         34h    4
        001017bd 74              ??         74h    t
        001017be 30              ??         30h    0
        001017bf 83              ??         83h
        001017c0 f8              ??         F8h
        001017c1 34              ??         34h    4
        001017c2 7f              ??         7Fh    
        001017c3 35              ??         35h    5
        001017c4 83              ??         83h
        001017c5 f8              ??         F8h
        001017c6 33              ??         33h    3
        001017c7 74              ??         74h    t
        001017c8 1f              ??         1Fh
        001017c9 83              ??         83h
        001017ca f8              ??         F8h
        001017cb 33              ??         33h    3
        001017cc 7f              ??         7Fh    
        001017cd 2b              ??         2Bh    +
        001017ce 83              ??         83h
        001017cf f8              ??         F8h
        001017d0 31              ??         31h    1
        001017d1 74              ??         74h    t
        001017d2 07              ??         07h
        001017d3 83              ??         83h
        001017d4 f8              ??         F8h
        001017d5 32              ??         32h    2
        001017d6 74              ??         74h    t
        001017d7 09              ??         09h
        001017d8 eb              ??         EBh
        001017d9 1f              ??         1Fh
        001017da e8              ??         E8h
        001017db 70              ??         70h    p
        001017dc fe              ??         FEh
        001017dd ff              ??         FFh
        001017de ff              ??         FFh
        001017df eb              ??         EBh
        001017e0 2a              ??         2Ah    *
        001017e1 e8              ??         E8h
        001017e2 83              ??         83h
        001017e3 fb              ??         FBh
        001017e4 ff              ??         FFh
        001017e5 ff              ??         FFh
        001017e6 eb              ??         EBh
        001017e7 23              ??         23h    #
        001017e8 e8              ??         E8h
        001017e9 36              ??         36h    6
        001017ea fd              ??         FDh
        001017eb ff              ??         FFh
        001017ec ff              ??         FFh
        001017ed eb              ??         EBh
        001017ee 1c              ??         1Ch
        001017ef bf              ??         BFh
        001017f0 00              ??         00h
        001017f1 00              ??         00h
        001017f2 00              ??         00h
        001017f3 00              ??         00h
        001017f4 e8              ??         E8h
        001017f5 97              ??         97h
        001017f6 f9              ??         F9h
        001017f7 ff              ??         FFh
        001017f8 ff              ??         FFh
        001017f9 48              ??         48h    H
        001017fa 8d              ??         8Dh
        001017fb 3d              ??         3Dh    =
        001017fc a5              ??         A5h
        001017fd 0d              ??         0Dh
        001017fe 00              ??         00h
        001017ff 00              ??         00h
        00101800 b8              ??         B8h
        00101801 00              ??         00h
        00101802 00              ??         00h
        00101803 00              ??         00h
        00101804 00              ??         00h
        00101805 e8              ??         E8h
        00101806 16              ??         16h
        00101807 f9              ??         F9h
        00101808 ff              ??         FFh
        00101809 ff              ??         FFh
        0010180a 90              ??         90h
        0010180b e9              ??         E9h
        0010180c 6d              ??         6Dh    m
        0010180d ff              ??         FFh
        0010180e ff              ??         FFh
        0010180f ff              ??         FFh
                             LAB_00101810                                    XREF[2]:     entry:001011ba(*), 00102628  
        00101810 f3 0f 1e fa     ENDBR64
        00101814 41 57           PUSH       R15
        00101816 4c 8d 3d        LEA        R15,[__DT_INIT_ARRAY]                            = 101280h
                 3b 25 00 00
        0010181d 41 56           PUSH       R14
        0010181f 49 89 d6        MOV        R14,RDX
        00101822 41 55           PUSH       R13
        00101824 49 89 f5        MOV        R13,RSI
        00101827 41 54           PUSH       R12
        00101829 41 89 fc        MOV        R12D,EDI
        0010182c 55              PUSH       RBP
        0010182d 48 8d 2d        LEA        RBP,[__DT_FINI_ARRAY]                            = 101240h
                 2c 25 00 00
        00101834 53              PUSH       RBX
        00101835 4c 29 fd        SUB        RBP,R15
        00101838 48 83 ec 08     SUB        RSP,0x8
        0010183c e8 bf f7        CALL       _DT_INIT                                         undefined _DT_INIT()
                 ff ff
        00101841 48 c1 fd 03     SAR        RBP,0x3
        00101845 74 1f           JZ         LAB_00101866
        00101847 31 db           XOR        EBX,EBX
        00101849 0f 1f 80        NOP        dword ptr [RAX]
                 00 00 00 00
                             LAB_00101850                                    XREF[1]:     00101864(j)  
        00101850 4c 89 f2        MOV        RDX,R14
        00101853 4c 89 ee        MOV        RSI,R13
        00101856 44 89 e7        MOV        EDI,R12D
        00101859 41 ff 14 df     CALL       qword ptr [R15 + RBX*0x8]=>->_INIT_0             = 101240h
                                                                                             = 101280h
                                                                                             undefined _FINI_0()
                                                                                             undefined _INIT_0()
        0010185d 48 83 c3 01     ADD        RBX,0x1
        00101861 48 39 dd        CMP        RBP,RBX
        00101864 75 ea           JNZ        LAB_00101850
                             LAB_00101866                                    XREF[1]:     00101845(j)  
        00101866 48 83 c4 08     ADD        RSP,0x8
        0010186a 5b              POP        RBX
        0010186b 5d              POP        RBP
        0010186c 41 5c           POP        R12
        0010186e 41 5d           POP        R13
        00101870 41 5e           POP        R14
        00101872 41 5f           POP        R15
        00101874 c3              RET
        00101875 66              ??         66h    f
        00101876 66              ??         66h    f
        00101877 2e              ??         2Eh    .
        00101878 0f              ??         0Fh
        00101879 1f              ??         1Fh
        0010187a 84              ??         84h
        0010187b 00              ??         00h
        0010187c 00              ??         00h
        0010187d 00              ??         00h
        0010187e 00              ??         00h
        0010187f 00              ??         00h
                             DAT_00101880                                    XREF[2]:     entry:001011b3(*), 00102630  
        00101880 f3              ??         F3h
        00101881 0f              ??         0Fh
        00101882 1e              ??         1Eh
        00101883 fa              ??         FAh
        00101884 c3              ??         C3h
                             //
                             // .fini 
                             // SHT_PROGBITS  [0x1888 - 0x1894]
                             // ram: 00101888-00101894
                             //
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined _DT_FINI()
             undefined         AL:1           <RETURN>
                             __DT_FINI                                       XREF[3]:     Entry Point(*), 00103d90(*), 
                             _DT_FINI                                                     _elfSectionHeaders::00000450(*)  
        00101888 f3 0f 1e fa     ENDBR64
        0010188c 48 83 ec 08     SUB        RSP,0x8
        00101890 48 83 c4 08     ADD        RSP,0x8
        00101894 c3              RET
                             //
                             // .rodata 
                             // SHT_PROGBITS  [0x2000 - 0x25b3]
                             // ram: 00102000-001025b3
                             //
                             DAT_00102000                                    XREF[2]:     00100130(*), 
                                                                                          _elfSectionHeaders::00000490(*)  
        00102000 01              ??         01h
        00102001 00              ??         00h
        00102002 02              ??         02h
        00102003 00              ??         00h
        00102004 00              ??         00h
        00102005 00              ??         00h
        00102006 00              ??         00h
        00102007 00              ??         00h
                             s_will_attack_a_McDonald's_employe_00102008     XREF[1]:     00104020(*)  
        00102008 77 69 6c        ds         "will attack a McDonald's employee for not get
                 6c 20 61 
                 74 74 61 
        00102042 00              ??         00h
        00102043 00              ??         00h
        00102044 00              ??         00h
        00102045 00              ??         00h
        00102046 00              ??         00h
        00102047 00              ??         00h
                             s_will_crash_his_lawn_mower_into_a_00102048     XREF[1]:     00104028(*)  
        00102048 77 69 6c        ds         "will crash his lawn mower into a police car a
                 6c 20 63 
                 72 61 73 
        00102094 00              ??         00h
        00102095 00              ??         00h
        00102096 00              ??         00h
        00102097 00              ??         00h
                             s_will_pull_a_gator_from_his_yoga_p_00102098    XREF[1]:     00104030(*)  
        00102098 77 69 6c        ds         "will pull a gator from his yoga pants during 
                 6c 20 70 
                 75 6c 6c 
        001020d4 00              ??         00h
        001020d5 00              ??         00h
        001020d6 00              ??         00h
        001020d7 00              ??         00h
                             s_will_call_911_to_report_his_room_001020d8     XREF[1]:     00104038(*)  
        001020d8 77 69 6c        ds         "will call 911 to report his roommate stole hi
                 6c 20 63 
                 61 6c 6c 
        0010210c 00              ??         00h
        0010210d 00              ??         00h
        0010210e 00              ??         00h
        0010210f 00              ??         00h
                             s_will_be_accused_of_giving_beer_t_00102110     XREF[1]:     00104040(*)  
        00102110 77 69 6c        ds         "will be accused of giving beer to an alligator"
                 6c 20 62 
                 65 20 61 
        0010213f 00              ??         00h
                             s_will_find_a_boa_constrictor_in_h_00102140     XREF[1]:     00104048(*)  
        00102140 77 69 6c        ds         "will find a boa constrictor in his car engine"
                 6c 20 66 
                 69 6e 64 
        0010216e 00              ??         00h
        0010216f 00              ??         00h
                             s_will_find_a_WWII_grenade,_put_it_00102170     XREF[1]:     00104050(*)  
        00102170 77 69 6c        ds         "will find a WWII grenade, put it in his truck
                 6c 20 66 
                 69 6e 64 
        001021b6 00              ??         00h
        001021b7 00              ??         00h
                             s_will_lick_a_camera-enabled_doorb_001021b8     XREF[1]:     00104058(*)  
        001021b8 77 69 6c        ds         "will lick a camera-enabled doorbell"
                 6c 20 6c 
                 69 63 6b 
        001021dc 00              ??         00h
        001021dd 00              ??         00h
        001021de 00              ??         00h
        001021df 00              ??         00h
                             s_will_find_an_iguana_in_his_toile_001021e0     XREF[1]:     00104060(*)  
        001021e0 77 69 6c        ds         "will find an iguana in his toilet"
                 6c 20 66 
                 69 6e 64 
        00102202 00              ??         00h
        00102203 00              ??         00h
        00102204 00              ??         00h
        00102205 00              ??         00h
        00102206 00              ??         00h
        00102207 00              ??         00h
                             s_will_steal_$6,000_worth_of_sungl_00102208     XREF[1]:     00104068(*)  
        00102208 77 69 6c        ds         "will steal $6,000 worth of sunglasses"
                 6c 20 73 
                 74 65 61 
                             s_./flag.txt_0010222e                           XREF[1]:     001012ad(*)  
        0010222e 2e 2f 66        ds         "./flag.txt"
                 6c 61 67 
                 2e 74 78 
                             s_Error_opening_flag.txt_00102239               XREF[1]:     001012c7(*)  
        00102239 45 72 72        ds         "Error opening flag.txt"
                 6f 72 20 
                 6f 70 65 
                             s_Hey,_you_are_taking_too_long_00102250         XREF[1]:     00101320(*)  
        00102250 48 65 79        ds         "Hey, you are taking too long"
                 2c 20 79 
                 6f 75 20 
        0010226d 00              ??         00h
        0010226e 00              ??         00h
        0010226f 00              ??         00h
                             s_I'm_only_going_to_warn_you_once._00102270     XREF[1]:     0010132c(*)  
        00102270 49 27 6d        ds         "I'm only going to warn you once..."
                 20 6f 6e 
                 6c 79 20 
                             s_Enter_test_data_00102293                      XREF[1]:     001013f6(*)  
        00102293 45 6e 74        ds         "Enter test data"
                 65 72 20 
                 74 65 73 
                             DAT_001022a3                                    XREF[1]:     00101409(*)  
        001022a3 20              ??         20h     
        001022a4 25              ??         25h    %
        001022a5 73              ??         73h    s
        001022a6 00              ??         00h
                             s_Received_test_data:_%s_001022a7               XREF[1]:     00101430(*)  
        001022a7 52 65 63        ds         "Received test data: %s\n"
                 65 69 76 
                 65 64 20 
                             s_Does_it_match_(y/n)?_001022bf                 XREF[1]:     00101441(*)  
        001022bf 44 6f 65        ds         "Does it match (y/n)?"
                 73 20 69 
                 74 20 6d 
                             DAT_001022d4                                    XREF[1]:     00101454(*)  
        001022d4 20              ??         20h     
        001022d5 25              ??         25h    %
        001022d6 63              ??         63h    c
        001022d7 00              ??         00h
                             s_Uh-oh!_Alert_your_local_data_sci_001022d8     XREF[1]:     0010147c(*)  
        001022d8 55 68 2d        ds         "Uh-oh! Alert your local data scientist!"
                 6f 68 21 
                 20 41 6c 
                             s_Program_operating_normally_00102300           XREF[1]:     00101492(*)  
        00102300 50 72 6f        ds         "Program operating normally\n"
                 67 72 61 
                 6d 20 6f 
                             DAT_0010231c                                    XREF[1]:     FUN_001014b5:001014de(*)  
        0010231c 25              ??         25h    %
        0010231d 64              ??         64h    d
        0010231e 00              ??         00h
                             s_You've_lost_my_trust..._0010231f              XREF[1]:     FUN_001014b5:001014f4(*)  
        0010231f 59 6f 75        ds         "You've lost my trust..."
                 27 76 65 
                 20 6c 6f 
        00102337 00              ??         00h
                             s_Enter_first_forecast_parameter_(_00102338     XREF[1]:     0010154c(*)  
        00102338 45 6e 74        ds         "Enter first forecast parameter (integer): "
                 65 72 20 
                 66 69 72 
        00102363 00              ??         00h
        00102364 00              ??         00h
        00102365 00              ??         00h
        00102366 00              ??         00h
        00102367 00              ??         00h
                             s_Enter_second_forecast_parameter_(_00102368    XREF[1]:     00101565(*)  
        00102368 45 6e 74        ds         "Enter second forecast parameter (integer): "
                 65 72 20 
                 73 65 63 
                             DAT_00102394                                    XREF[1]:     001015a6(*)  
        00102394 25              ??         25h    %
        00102395 70              ??         70h    p
        00102396 0a              ??         0Ah
        00102397 00              ??         00h
                             s__A_Florida_man_%s_00102398                    XREF[1]:     001015fc(*)  
        00102398 0a 41 20        ds         "\nA Florida man %s\n\n"
                 46 6c 6f 
                 72 69 64 
                             s_============================_001023ac         XREF[4]:     0010161d(*), 00101624(*), 
                                                                                          0010162c(*), 00101644(*)  
        001023ac 3d 3d 3d        ds         "============================"
                 3d 3d 3d 
                 3d 3d 3d 
                             s_FLORIDA_MAN_FORECAST_MACHINE_001023c9         XREF[1]:     00101634(*)  
        001023c9 46 4c 4f        ds         "FLORIDA MAN FORECAST MACHINE"
                 52 49 44 
                 41 20 4d 
        001023e6 00              ??         00h
        001023e7 00              ??         00h
                             s_Concerned_about_how_Florida_Man_m_001023e8    XREF[1]:     00101657(*)  
        001023e8 43 6f 6e        ds         "Concerned about how Florida Man might ruin yo
                 63 65 72 
                 6e 65 64 
        00102439 00              ??         00h
        0010243a 00              ??         00h
        0010243b 00              ??         00h
        0010243c 00              ??         00h
        0010243d 00              ??         00h
        0010243e 00              ??         00h
        0010243f 00              ??         00h
                             s_Our_proprietary_machine_learning_00102440     XREF[1]:     00101663(*)  
        00102440 4f 75 72        ds         "Our proprietary machine learning wizardry ana
                 20 70 72 
                 6f 70 72 
        001024a7 00              ??         00h
                             s_informing_you_what_to_expect_dur_001024a8     XREF[1]:     0010166f(*)  
        001024a8 69 6e 66        ds         "informing you what to expect during your visi
                 6f 72 6d 
                 69 6e 67 
        001024ec 00              ??         00h
        001024ed 00              ??         00h
        001024ee 00              ??         00h
        001024ef 00              ??         00h
                             s_If_you_doubt_your_forecasts,_fee_001024f0     XREF[1]:     0010167b(*)  
        001024f0 49 66 20        ds         "If you doubt your forecasts, feel free to run
                 79 6f 75 
                 20 64 6f 
        00102533 00              ??         00h
        00102534 00              ??         00h
        00102535 00              ??         00h
        00102536 00              ??         00h
        00102537 00              ??         00h
                             s__*_Hey,_Rob,_you_automated_those_00102538     XREF[1]:     00101687(*)  
        00102538 0a 2a 20        ds         "\n* Hey, Rob, you automated those tests, righ
                 48 65 79 
                 2c 20 52 
                             s_1)_Help_00102567                              XREF[1]:     0010169e(*)  
        00102567 31 29 20        ds         "1) Help"
                 48 65 6c 
                 70 00
                             s_2)_Test_processing_unit_0010256f              XREF[1]:     001016aa(*)  
        0010256f 32 29 20        ds         "2) Test processing unit"
                 54 65 73 
                 74 20 70 
                             s_3)_Forecast_00102587                          XREF[1]:     001016b6(*)  
        00102587 33 29 20        ds         "3) Forecast"
                 46 6f 72 
                 65 63 61 
                             s_4)_Exit_00102593                              XREF[1]:     001016c2(*)  
        00102593 34 29 20        ds         "4) Exit"
                 45 78 69 
                 74 00
                             s__Choice:_0010259b                             XREF[1]:     001016ce(*)  
        0010259b 0a 43 68        ds         "\nChoice: "
                 6f 69 63 
                 65 3a 20 00
        001025a5 49 6e 76        ds         "Invalid choice"
                 61 6c 69 
                 64 20 63 
                             //
                             // .eh_frame_hdr 
                             // SHT_PROGBITS  [0x25b4 - 0x2637]
                             // ram: 001025b4-00102637
                             //
                             **************************************************************
                             * Exception Handler Frame Header                             *
                             **************************************************************
                             eh_frame_hdr_001025b4                           XREF[2]:     00100280(*), 
                                                                                          _elfSectionHeaders::000004d0(*)  
        001025b4 01 1b 03 3b     eh_frame                                                    Exception Handler Frame Header V
        001025b8 80 00 00 00     ddw        cie_00102638                                     Encoded eh_frame_ptr
        001025bc 0f 00 00 00     ddw        Fh                                               Encoded FDE count
                             **************************************************************
                             * Frame Description Entry Table                              *
                             **************************************************************
        001025c0 6c ea ff        fde_tabl                                                    Initial Location
                 ff b4 00 
                 00 00
        001025c8 2c eb ff        fde_tabl                                                    Initial Location
                 ff dc 00 
                 00 00
        001025d0 3c eb ff        fde_tabl                                                    Initial Location
                 ff f4 00 
                 00 00
        001025d8 ec eb ff        fde_tabl                                                    Initial Location
                 ff 9c 00 
                 00 00
        001025e0 d5 ec ff        fde_tabl                                                    Initial Location
                 ff 0c 01 
                 00 00
        001025e8 5d ed ff        fde_tabl                                                    Initial Location
                 ff 28 01 
                 00 00
        001025f0 b5 ed ff        fde_tabl                                                    Initial Location
                 ff 48 01 
                 00 00
        001025f8 01 ef ff        fde_tabl                                                    Initial Location
                 ff 68 01 
                 00 00
        00102600 6f ef ff        fde_tabl                                                    Initial Location
                 ff 88 01 
                 00 00
        00102608 5d f0 ff        fde_tabl                                                    Initial Location
                 ff a8 01 
                 00 00
        00102610 9b f0 ff        fde_tabl                                                    Initial Location
                 ff c8 01 
                 00 00
        00102618 e2 f0 ff        fde_tabl                                                    Initial Location
                 ff e8 01 
                 00 00
        00102620 2e f1 ff        fde_tabl                                                    Initial Location
                 ff 08 02 
                 00 00
        00102628 5c f2 ff        fde_tabl                                                    Initial Location
                 ff 24 02 
                 00 00
        00102630 cc f2 ff        fde_tabl                                                    Initial Location
                 ff 6c 02 
                 00 00
                             //
                             // .eh_frame 
                             // SHT_PROGBITS  [0x2638 - 0x2837]
                             // ram: 00102638-00102837
                             //
                             **************************************************************
                             * Common Information Entry                                   *
                             **************************************************************
                             cie_00102638                                    XREF[17]:    001025b8(*), 00102654(*), 
                                                                                          0010266c(*), 00102694(*), 
                                                                                          001026ac(*), 001026c4(*), 
                                                                                          001026e0(*), 00102700(*), 
                                                                                          00102720(*), 00102740(*), 
                                                                                          00102760(*), 00102780(*), 
                                                                                          001027a0(*), 001027c0(*), 
                                                                                          001027dc(*), 00102824(*), 
                                                                                          _elfSectionHeaders::00000510(*)  
        00102638 14 00 00 00     ddw        14h                                              (CIE) Length
        0010263c 00 00 00 00     ddw        0h                                               (CIE) ID
        00102640 01              db         1h                                               (CIE) Version
        00102641 7a 52 00        ds         "zR"                                             (CIE) Augmentation String
        00102644 01              uleb128    1h                                               (CIE) Code Alignment
        00102645 78              sleb128    -8h                                              (CIE) Data Alignment
        00102646 10              db         10h                                              (CIE) Return Address Register Co
        00102647 01              uleb128    1h                                               (CIE) Augmentation Data Length
        00102648 1b              dwfenc     DW_EH_PE_sdata4 | DW_EH_PE_pcrel                 (CIE Augmentation Data) FDE Enco
        00102649 0c 07 08        db[7]                                                       (CIE) Initial Instructions
                 90 01 00 00
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_00102650                                    XREF[1]:     001025dc(*)  
        00102650 14 00 00 00     ddw        14h                                              (FDE) Length
        00102654 1c 00 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        00102658 48 eb ff ff     ddw        DAT_002011a0                                     (FDE) PcBegin
        0010265c 2f 00 00 00     ddw        2Fh                                              (FDE) PcRange
        00102660 00              uleb128    0h                                               (FDE) Augmentation Data Length
        00102661 44 07 10        db[7]                                                       (FDE) Call Frame Instructions
                 00 00 00 00
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_00102668                                    XREF[1]:     001025c4(*)  
        00102668 24 00 00 00     ddw        24h                                              (FDE) Length
        0010266c 34 00 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        00102670 b0 e9 ff ff     ddw        DAT_00201020                                     (FDE) PcBegin
        00102674 c0 00 00 00     ddw        C0h                                              (FDE) PcRange
        00102678 00              uleb128    0h                                               (FDE) Augmentation Data Length
        00102679 0e 10 46        db[23]                                                      (FDE) Call Frame Instructions
                 0e 18 4a 
                 0f 0b 77 
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_00102690                                    XREF[1]:     001025cc(*)  
        00102690 14 00 00 00     ddw        14h                                              (FDE) Length
        00102694 5c 00 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        00102698 48 ea ff ff     ddw        DAT_002010e0                                     (FDE) PcBegin
        0010269c 10 00 00        dq         10h                                              (FDE) PcRange
                 00 00 00 
                 00 00
        001026a4 00              uleb128    0h                                               (FDE) Augmentation Data Length
        001026a5 00 00 00        db[3]                                                       (FDE) Call Frame Instructions
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_001026a8                                    XREF[1]:     001025d4(*)  
        001026a8 14 00 00 00     ddw        14h                                              (FDE) Length
        001026ac 74 00 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        001026b0 40 ea ff ff     ddw        DAT_002010f0                                     (FDE) PcBegin
        001026b4 b0 00 00        dq         B0h                                              (FDE) PcRange
                 00 00 00 
                 00 00
        001026bc 00              uleb128    0h                                               (FDE) Augmentation Data Length
        001026bd 00 00 00        db[3]                                                       (FDE) Call Frame Instructions
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_001026c0                                    XREF[1]:     001025e4(*)  
        001026c0 18 00 00 00     ddw        18h                                              (FDE) Length
        001026c4 8c 00 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        001026c8 c1 eb ff ff     ddw        DAT_00201289                                     (FDE) PcBegin
        001026cc 88 00 00 00     ddw        88h                                              (FDE) PcRange
        001026d0 00              uleb128    0h                                               (FDE) Augmentation Data Length
        001026d1 45 0e 10        db[11]                                                      (FDE) Call Frame Instructions
                 86 02 43 
                 0d 06 00 
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_001026dc                                    XREF[1]:     001025ec(*)  
        001026dc 1c 00 00 00     ddw        1Ch                                              (FDE) Length
        001026e0 a8 00 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        001026e4 2d ec ff ff     ddw        DAT_00201311                                     (FDE) PcBegin
        001026e8 58 00 00 00     ddw        58h                                              (FDE) PcRange
        001026ec 00              uleb128    0h                                               (FDE) Augmentation Data Length
        001026ed 45 0e 10        db[15]                                                      (FDE) Call Frame Instructions
                 86 02 43 
                 0d 06 02 
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_001026fc                                    XREF[1]:     001025f4(*)  
        001026fc 1c 00 00 00     ddw        1Ch                                              (FDE) Length
        00102700 c8 00 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        00102704 65 ec ff ff     ddw        DAT_00201369                                     (FDE) PcBegin
        00102708 4c 01 00 00     ddw        14Ch                                             (FDE) PcRange
        0010270c 00              uleb128    0h                                               (FDE) Augmentation Data Length
        0010270d 45 0e 10        db[15]                                                      (FDE) Call Frame Instructions
                 86 02 43 
                 0d 06 03 
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_0010271c                                    XREF[1]:     001025fc(*)  
        0010271c 1c 00 00 00     ddw        1Ch                                              (FDE) Length
        00102720 e8 00 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        00102724 91 ed ff ff     ddw        DAT_002014b5                                     (FDE) PcBegin
        00102728 6e 00 00 00     ddw        6Eh                                              (FDE) PcRange
        0010272c 00              uleb128    0h                                               (FDE) Augmentation Data Length
        0010272d 45 0e 10        db[15]                                                      (FDE) Call Frame Instructions
                 86 02 43 
                 0d 06 02 
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_0010273c                                    XREF[1]:     00102604(*)  
        0010273c 1c 00 00 00     ddw        1Ch                                              (FDE) Length
        00102740 08 01 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        00102744 df ed ff ff     ddw        DAT_00201523                                     (FDE) PcBegin
        00102748 ee 00 00 00     ddw        EEh                                              (FDE) PcRange
        0010274c 00              uleb128    0h                                               (FDE) Augmentation Data Length
        0010274d 45 0e 10        db[15]                                                      (FDE) Call Frame Instructions
                 86 02 43 
                 0d 06 02 
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_0010275c                                    XREF[1]:     0010260c(*)  
        0010275c 1c 00 00 00     ddw        1Ch                                              (FDE) Length
        00102760 28 01 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        00102764 ad ee ff ff     ddw        DAT_00201611                                     (FDE) PcBegin
        00102768 3e 00 00 00     ddw        3Eh                                              (FDE) PcRange
        0010276c 00              uleb128    0h                                               (FDE) Augmentation Data Length
        0010276d 45 0e 10        db[15]                                                      (FDE) Call Frame Instructions
                 86 02 43 
                 0d 06 75 
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_0010277c                                    XREF[1]:     00102614(*)  
        0010277c 1c 00 00 00     ddw        1Ch                                              (FDE) Length
        00102780 48 01 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        00102784 cb ee ff ff     ddw        DAT_0020164f                                     (FDE) PcBegin
        00102788 47 00 00 00     ddw        47h                                              (FDE) PcRange
        0010278c 00              uleb128    0h                                               (FDE) Augmentation Data Length
        0010278d 45 0e 10        db[15]                                                      (FDE) Call Frame Instructions
                 86 02 43 
                 0d 06 7e 
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_0010279c                                    XREF[1]:     0010261c(*)  
        0010279c 1c 00 00 00     ddw        1Ch                                              (FDE) Length
        001027a0 68 01 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        001027a4 f2 ee ff ff     ddw        DAT_00201696                                     (FDE) PcBegin
        001027a8 4c 00 00 00     ddw        4Ch                                              (FDE) PcRange
        001027ac 00              uleb128    0h                                               (FDE) Augmentation Data Length
        001027ad 45 0e 10        db[15]                                                      (FDE) Call Frame Instructions
                 86 02 43 
                 0d 06 02 
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_001027bc                                    XREF[1]:     00102624(*)  
        001027bc 18 00 00 00     ddw        18h                                              (FDE) Length
        001027c0 88 01 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        001027c4 1e ef ff ff     ddw        DAT_002016e2                                     (FDE) PcBegin
        001027c8 2e 01 00 00     ddw        12Eh                                             (FDE) PcRange
        001027cc 00              uleb128    0h                                               (FDE) Augmentation Data Length
        001027cd 45 0e 10        db[11]                                                      (FDE) Call Frame Instructions
                 86 02 43 
                 0d 06 00 
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_001027d8                                    XREF[1]:     0010262c(*)  
        001027d8 44 00 00 00     ddw        44h                                              (FDE) Length
        001027dc a4 01 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        001027e0 30 f0 ff ff     ddw        DAT_00201810                                     (FDE) PcBegin
        001027e4 65 00 00 00     ddw        65h                                              (FDE) PcRange
        001027e8 00              uleb128    0h                                               (FDE) Augmentation Data Length
        001027e9 46 0e 10        db[55]                                                      (FDE) Call Frame Instructions
                 8f 02 49 
                 0e 18 8e 
                             **************************************************************
                             * Frame Descriptor Entry                                     *
                             **************************************************************
                             fde_00102820                                    XREF[1]:     00102634(*)  
        00102820 10 00 00 00     ddw        10h                                              (FDE) Length
        00102824 ec 01 00 00     ddw        cie_00102638                                     (FDE) CIE Reference Pointer 
        00102828 58 f0 ff ff     ddw        DAT_00201880                                     (FDE) PcBegin
        0010282c 05 00 00        dq         5h                                               (FDE) PcRange
                 00 00 00 
                 00 00
                             **************************************************************
                             * END OF FRAME                                               *
                             **************************************************************
        00102834 00 00 00 00     ddw        0h                                               End of Frame
                             //
                             // .init_array 
                             // SHT_INIT_ARRAY  [0x3d58 - 0x3d5f]
                             // ram: 00103d58-00103d5f
                             //
                             __DT_INIT_ARRAY                                 XREF[6]:     00100168(*), 001002f0(*), 
                                                                                          00101816(*), 00101859(R), 
                                                                                          00103da0(*), 
                                                                                          _elfSectionHeaders::00000550(*)  
        00103d58 80 12 10        dq         _INIT_0
                 00 00 00 
                 00 00
                             //
                             // .fini_array 
                             // SHT_FINI_ARRAY  [0x3d60 - 0x3d67]
                             // ram: 00103d60-00103d67
                             //
                             __DT_FINI_ARRAY                                 XREF[4]:     0010182d(*), 00101859(R), 
                                                                                          00103dc0(*), 
                                                                                          _elfSectionHeaders::00000590(*)  
        00103d60 40 12 10        dq         _FINI_0
                 00 00 00 
                 00 00
                             //
                             // .dynamic 
                             // SHT_DYNAMIC  [0x3d68 - 0x3f57]
                             // ram: 00103d68-00103f57
                             //
                             _DYNAMIC                                        XREF[2]:     001001a0(*), 
                                                                                          _elfSectionHeaders::000005d0(*)  
        00103d68 01 00 00        Elf64_Dy                                                    DT_NEEDED - Name of needed library
                 00 00 00 
                 00 00 01 
        00103f18 00              ??         00h
        00103f19 00              ??         00h
        00103f1a 00              ??         00h
        00103f1b 00              ??         00h
        00103f1c 00              ??         00h
        00103f1d 00              ??         00h
        00103f1e 00              ??         00h
        00103f1f 00              ??         00h
        00103f20 00              ??         00h
        00103f21 00              ??         00h
        00103f22 00              ??         00h
        00103f23 00              ??         00h
        00103f24 00              ??         00h
        00103f25 00              ??         00h
        00103f26 00              ??         00h
        00103f27 00              ??         00h
        00103f28 00              ??         00h
        00103f29 00              ??         00h
        00103f2a 00              ??         00h
        00103f2b 00              ??         00h
        00103f2c 00              ??         00h
        00103f2d 00              ??         00h
        00103f2e 00              ??         00h
        00103f2f 00              ??         00h
        00103f30 00              ??         00h
        00103f31 00              ??         00h
        00103f32 00              ??         00h
        00103f33 00              ??         00h
        00103f34 00              ??         00h
        00103f35 00              ??         00h
        00103f36 00              ??         00h
        00103f37 00              ??         00h
        00103f38 00              ??         00h
        00103f39 00              ??         00h
        00103f3a 00              ??         00h
        00103f3b 00              ??         00h
        00103f3c 00              ??         00h
        00103f3d 00              ??         00h
        00103f3e 00              ??         00h
        00103f3f 00              ??         00h
        00103f40 00              ??         00h
        00103f41 00              ??         00h
        00103f42 00              ??         00h
        00103f43 00              ??         00h
        00103f44 00              ??         00h
        00103f45 00              ??         00h
        00103f46 00              ??         00h
        00103f47 00              ??         00h
        00103f48 00              ??         00h
        00103f49 00              ??         00h
        00103f4a 00              ??         00h
        00103f4b 00              ??         00h
        00103f4c 00              ??         00h
        00103f4d 00              ??         00h
        00103f4e 00              ??         00h
        00103f4f 00              ??         00h
        00103f50 00              ??         00h
        00103f51 00              ??         00h
        00103f52 00              ??         00h
        00103f53 00              ??         00h
        00103f54 00              ??         00h
        00103f55 00              ??         00h
        00103f56 00              ??         00h
        00103f57 00              ??         00h
                             //
                             // .got 
                             // SHT_PROGBITS  [0x3f58 - 0x3fff]
                             // ram: 00103f58-00103fff
                             //
                             __DT_PLTGOT                                     XREF[2]:     00103e40(*), 
                                                                                          _elfSectionHeaders::00000610(*)  
        00103f58 68 3d 00        addr       00003d68
                 00 00 00 
                 00 00
                             PTR_00103f60                                    XREF[1]:     00101020(R)  
        00103f60 00 00 00        addr       00000000
                 00 00 00 
                 00 00
                             PTR_00103f68                                    XREF[1]:     00101026  
        00103f68 00 00 00        addr       00000000
                 00 00 00 
                 00 00
                             PTR_putchar_00103f70                            XREF[1]:     putchar:001010f4  
        00103f70 00 50 10        addr       putchar                                          = ??
                 00 00 00 
                 00 00
                             PTR_puts_00103f78                               XREF[1]:     puts:00101104  
        00103f78 18 50 10        addr       puts                                             = ??
                 00 00 00 
                 00 00
                             PTR___stack_chk_fail_00103f80                   XREF[1]:     __stack_chk_fail:00101114  
        00103f80 20 50 10        addr       __stack_chk_fail                                 = ??
                 00 00 00 
                 00 00
                             PTR_printf_00103f88                             XREF[1]:     printf:00101124  
        00103f88 28 50 10        addr       printf                                           = ??
                 00 00 00 
                 00 00
                             PTR_alarm_00103f90                              XREF[1]:     alarm:00101134  
        00103f90 30 50 10        addr       alarm                                            = ??
                 00 00 00 
                 00 00
                             PTR_read_00103f98                               XREF[1]:     read:00101144  
        00103f98 38 50 10        addr       read                                             = ??
                 00 00 00 
                 00 00
                             PTR_signal_00103fa0                             XREF[1]:     signal:00101154  
        00103fa0 48 50 10        addr       signal                                           = ??
                 00 00 00 
                 00 00
        00103fa8 58 50 10        addr       setvbuf                                          = ??
                 00 00 00 
                 00 00
                             PTR_open_00103fb0                               XREF[1]:     open:00101174  
        00103fb0 60 50 10        addr       open                                             = ??
                 00 00 00 
                 00 00
                             PTR___isoc99_scanf_00103fb8                     XREF[1]:     __isoc99_scanf:00101184  
        00103fb8 68 50 10        addr       __isoc99_scanf                                   = ??
                 00 00 00 
                 00 00
                             PTR_exit_00103fc0                               XREF[1]:     exit:00101194  
        00103fc0 70 50 10        addr       exit                                             = ??
                 00 00 00 
                 00 00
                             PTR__ITM_deregisterTMCloneTable_00103fc8        XREF[1]:     FUN_001011d0:001011e3(R)  
        00103fc8 08 50 10        addr       _ITM_deregisterTMCloneTable                      = ??
                 00 00 00 
                 00 00
        00103fd0 10 50 10        addr       stdout                                           = ??
                 00 00 00 
                 00 00
                             PTR___libc_start_main_00103fd8                  XREF[1]:     entry:001011c8  
        00103fd8 40 50 10        addr       __libc_start_main                                = ??
                 00 00 00 
                 00 00
                             PTR___gmon_start___00103fe0                     XREF[1]:     _DT_INIT:00101008(R)  
        00103fe0 50 50 10        addr       __gmon_start__                                   = ??
                 00 00 00 
                 00 00
                             PTR__ITM_registerTMCloneTable_00103fe8          XREF[1]:     FUN_00101200:00101224(R)  
        00103fe8 78 50 10        addr       _ITM_registerTMCloneTable                        = ??
                 00 00 00 
                 00 00
                             PTR___cxa_finalize_00103ff0                     XREF[2]:     __cxa_finalize:001010e4, 
                                                                                          _FINI_0:0010124e(R)  
        00103ff0 88 50 10        addr       __cxa_finalize                                   = ??
                 00 00 00 
                 00 00
        00103ff8 80 50 10        addr       stderr                                           = ??
                 00 00 00 
                 00 00
                             //
                             // .data 
                             // SHT_PROGBITS  [0x4000 - 0x406f]
                             // ram: 00104000-0010406f
                             //
                             DAT_00104000                                    XREF[1]:     _elfSectionHeaders::00000650(*)  
        00104000 00              ??         00h
        00104001 00              ??         00h
        00104002 00              ??         00h
        00104003 00              ??         00h
        00104004 00              ??         00h
        00104005 00              ??         00h
        00104006 00              ??         00h
        00104007 00              ??         00h
                             PTR_LOOP_00104008                               XREF[2]:     _FINI_0:0010125b(R), 00104008(*)  
        00104008 08 40 10        addr       PTR_LOOP_00104008                                = 00104008
                 00 00 00 
                 00 00
        00104010 00              ??         00h
        00104011 00              ??         00h
        00104012 00              ??         00h
        00104013 00              ??         00h
        00104014 00              ??         00h
        00104015 00              ??         00h
        00104016 00              ??         00h
        00104017 00              ??         00h
        00104018 00              ??         00h
        00104019 00              ??         00h
        0010401a 00              ??         00h
        0010401b 00              ??         00h
        0010401c 00              ??         00h
        0010401d 00              ??         00h
        0010401e 00              ??         00h
        0010401f 00              ??         00h
                             PTR_s_will_attack_a_McDonald's_employe_00104020 XREF[2]:     001015e3(*), 001015ed(R)  
        00104020 08 20 10        addr       s_will_attack_a_McDonald's_employe_00102008      = "will attack a McDonald's empl
                 00 00 00 
                 00 00
        00104028 48 20 10        addr       s_will_crash_his_lawn_mower_into_a_00102048      = "will crash his lawn mower int
                 00 00 00 
                 00 00
        00104030 98 20 10        addr       s_will_pull_a_gator_from_his_yoga_p_00102098     = "will pull a gator from his yo
                 00 00 00 
                 00 00
        00104038 d8 20 10        addr       s_will_call_911_to_report_his_room_001020d8      = "will call 911 to report his r
                 00 00 00 
                 00 00
        00104040 10 21 10        addr       s_will_be_accused_of_giving_beer_t_00102110      = "will be accused of giving bee
                 00 00 00 
                 00 00
        00104048 40 21 10        addr       s_will_find_a_boa_constrictor_in_h_00102140      = "will find a boa constrictor i
                 00 00 00 
                 00 00
        00104050 70 21 10        addr       s_will_find_a_WWII_grenade,_put_it_00102170      = "will find a WWII grenade, put
                 00 00 00 
                 00 00
        00104058 b8 21 10        addr       s_will_lick_a_camera-enabled_doorb_001021b8      = "will lick a camera-enabled do
                 00 00 00 
                 00 00
        00104060 e0 21 10        addr       s_will_find_an_iguana_in_his_toile_001021e0      = "will find an iguana in his to
                 00 00 00 
                 00 00
        00104068 08 22 10        addr       s_will_steal_$6,000_worth_of_sungl_00102208      = "will steal $6,000 worth of su
                 00 00 00 
                 00 00
                             //
                             // .bss 
                             // SHT_NOBITS  [0x4070 - 0x407f]
                             // ram: 00104070-0010407f
                             //
                             DAT_00104070                                    XREF[7]:     FUN_001011d0:001011d0(*), 
                                                                                          FUN_001011d0:001011d7(*), 
                                                                                          FUN_00101200:00101200(*), 
                                                                                          FUN_00101200:00101207(*), 
                                                                                          _FINI_0:00101244(R), 
                                                                                          _FINI_0:0010126c(W), 
                                                                                          _elfSectionHeaders::00000690(*)  
        00104070                 ??         ??
        00104071                 ??         ??
        00104072                 ??         ??
        00104073                 ??         ??
        00104074                 ??         ??
        00104075                 ??         ??
        00104076                 ??         ??
        00104077                 ??         ??
                             DAT_00104078                                    XREF[4]:     00101338(*), 0010133f(R), 
                                                                                          00101352(*), 00101359(R)  
        00104078                 undefined8 ??
                             //
                             // EXTERNAL 
                             // NOTE: This block is artificial and is used to make relocat
                             // ram: 00105000-0010508f
                             //
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk int putchar(int __c)
                               Thunked-Function: <EXTERNAL>::putchar
             int               EAX:4          <RETURN>
             int               EDI:4          __c
                             putchar                                         XREF[2]:     putchar:001010f0(T), 
                                                                                          putchar:001010f4(c), 00103f70(*)  
        00105000                 ??         ??
        00105001                 ??         ??
        00105002                 ??         ??
        00105003                 ??         ??
        00105004                 ??         ??
        00105005                 ??         ??
        00105006                 ??         ??
        00105007                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk undefined _ITM_deregisterTMCloneTable()
                               Thunked-Function: <EXTERNAL>::_ITM_deregi
             undefined         AL:1           <RETURN>
                             _ITM_deregisterTMCloneTable                     XREF[3]:     FUN_001011d0:001011e3(*), 
                                                                                          FUN_001011d0:001011ef(c), 
                                                                                          00103fc8(*)  
        00105008                 ??         ??
        00105009                 ??         ??
        0010500a                 ??         ??
        0010500b                 ??         ??
        0010500c                 ??         ??
        0010500d                 ??         ??
        0010500e                 ??         ??
        0010500f                 ??         ??
                             stdout                                          XREF[1]:     00103fd0(*)  
        00105010                 ??         ??
        00105011                 ??         ??
        00105012                 ??         ??
        00105013                 ??         ??
        00105014                 ??         ??
        00105015                 ??         ??
        00105016                 ??         ??
        00105017                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk int puts(char * __s)
                               Thunked-Function: <EXTERNAL>::puts
             int               EAX:4          <RETURN>
             char *            RDI:8          __s
                             puts                                            XREF[2]:     puts:00101100(T), 
                                                                                          puts:00101104(c), 00103f78(*)  
        00105018                 ??         ??
        00105019                 ??         ??
        0010501a                 ??         ??
        0010501b                 ??         ??
        0010501c                 ??         ??
        0010501d                 ??         ??
        0010501e                 ??         ??
        0010501f                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk noreturn undefined __stack_chk_fail()
                               Thunked-Function: <EXTERNAL>::__stack_chk
             undefined         AL:1           <RETURN>
                             __stack_chk_fail                                XREF[2]:     __stack_chk_fail:00101110(T), 
                                                                                          __stack_chk_fail:00101114(c), 
                                                                                          00103f80(*)  
        00105020                 ??         ??
        00105021                 ??         ??
        00105022                 ??         ??
        00105023                 ??         ??
        00105024                 ??         ??
        00105025                 ??         ??
        00105026                 ??         ??
        00105027                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk int printf(char * __format, ...)
                               Thunked-Function: <EXTERNAL>::printf
             int               EAX:4          <RETURN>
             char *            RDI:8          __format
                             printf                                          XREF[2]:     printf:00101120(T), 
                                                                                          printf:00101124(c), 00103f88(*)  
        00105028                 ??         ??
        00105029                 ??         ??
        0010502a                 ??         ??
        0010502b                 ??         ??
        0010502c                 ??         ??
        0010502d                 ??         ??
        0010502e                 ??         ??
        0010502f                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk uint alarm(uint __seconds)
                               Thunked-Function: <EXTERNAL>::alarm
             uint              EAX:4          <RETURN>
             uint              EDI:4          __seconds
                             alarm                                           XREF[2]:     alarm:00101130(T), 
                                                                                          alarm:00101134(c), 00103f90(*)  
        00105030                 ??         ??
        00105031                 ??         ??
        00105032                 ??         ??
        00105033                 ??         ??
        00105034                 ??         ??
        00105035                 ??         ??
        00105036                 ??         ??
        00105037                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk ssize_t read(int __fd, void * __buf, size_t __nbyt
                               Thunked-Function: <EXTERNAL>::read
             ssize_t           RAX:8          <RETURN>
             int               EDI:4          __fd
             void *            RSI:8          __buf
             size_t            RDX:8          __nbytes
                             read                                            XREF[2]:     read:00101140(T), 
                                                                                          read:00101144(c), 00103f98(*)  
        00105038                 ??         ??
        00105039                 ??         ??
        0010503a                 ??         ??
        0010503b                 ??         ??
        0010503c                 ??         ??
        0010503d                 ??         ??
        0010503e                 ??         ??
        0010503f                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk undefined __libc_start_main()
                               Thunked-Function: <EXTERNAL>::__libc_star
             undefined         AL:1           <RETURN>
                             __libc_start_main                               XREF[2]:     entry:001011c8(c), 00103fd8(*)  
        00105040                 ??         ??
        00105041                 ??         ??
        00105042                 ??         ??
        00105043                 ??         ??
        00105044                 ??         ??
        00105045                 ??         ??
        00105046                 ??         ??
        00105047                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk __sighandler_t signal(int __sig, __sighandler_t __
                               Thunked-Function: <EXTERNAL>::signal
             __sighandler_t    RAX:8          <RETURN>
             int               EDI:4          __sig
             __sighandler_t    RSI:8          __handler
                             signal                                          XREF[2]:     signal:00101150(T), 
                                                                                          signal:00101154(c), 00103fa0(*)  
        00105048                 ??         ??
        00105049                 ??         ??
        0010504a                 ??         ??
        0010504b                 ??         ??
        0010504c                 ??         ??
        0010504d                 ??         ??
        0010504e                 ??         ??
        0010504f                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk undefined __gmon_start__()
                               Thunked-Function: <EXTERNAL>::__gmon_star
             undefined         AL:1           <RETURN>
                             __gmon_start__                                  XREF[3]:     _DT_INIT:00101008(*), 
                                                                                          _DT_INIT:00101014(c), 
                                                                                          00103fe0(*)  
        00105050                 ??         ??
        00105051                 ??         ??
        00105052                 ??         ??
        00105053                 ??         ??
        00105054                 ??         ??
        00105055                 ??         ??
        00105056                 ??         ??
        00105057                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk int setvbuf(FILE * __stream, char * __buf, int __m
                               Thunked-Function: <EXTERNAL>::setvbuf
             int               EAX:4          <RETURN>
             FILE *            RDI:8          __stream
             char *            RSI:8          __buf
             int               EDX:4          __modes
             size_t            RCX:8          __n
                             setvbuf                                         XREF[1]:     00103fa8(*)  
        00105058                 ??         ??
        00105059                 ??         ??
        0010505a                 ??         ??
        0010505b                 ??         ??
        0010505c                 ??         ??
        0010505d                 ??         ??
        0010505e                 ??         ??
        0010505f                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk int open(char * __file, int __oflag, ...)
                               Thunked-Function: <EXTERNAL>::open
             int               EAX:4          <RETURN>
             char *            RDI:8          __file
             int               ESI:4          __oflag
                             open                                            XREF[2]:     open:00101170(T), 
                                                                                          open:00101174(c), 00103fb0(*)  
        00105060                 ??         ??
        00105061                 ??         ??
        00105062                 ??         ??
        00105063                 ??         ??
        00105064                 ??         ??
        00105065                 ??         ??
        00105066                 ??         ??
        00105067                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk undefined __isoc99_scanf()
                               Thunked-Function: <EXTERNAL>::__isoc99_sc
             undefined         AL:1           <RETURN>
                             __isoc99_scanf                                  XREF[2]:     __isoc99_scanf:00101180(T), 
                                                                                          __isoc99_scanf:00101184(c), 
                                                                                          00103fb8(*)  
        00105068                 ??         ??
        00105069                 ??         ??
        0010506a                 ??         ??
        0010506b                 ??         ??
        0010506c                 ??         ??
        0010506d                 ??         ??
        0010506e                 ??         ??
        0010506f                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk noreturn void exit(int __status)
                               Thunked-Function: <EXTERNAL>::exit
             void              <VOID>         <RETURN>
             int               EDI:4          __status
                             exit                                            XREF[2]:     exit:00101190(T), 
                                                                                          exit:00101194(c), 00103fc0(*)  
        00105070                 ??         ??
        00105071                 ??         ??
        00105072                 ??         ??
        00105073                 ??         ??
        00105074                 ??         ??
        00105075                 ??         ??
        00105076                 ??         ??
        00105077                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk undefined _ITM_registerTMCloneTable()
                               Thunked-Function: <EXTERNAL>::_ITM_regist
             undefined         AL:1           <RETURN>
                             _ITM_registerTMCloneTable                       XREF[3]:     FUN_00101200:00101224(*), 
                                                                                          FUN_00101200:00101230(c), 
                                                                                          00103fe8(*)  
        00105078                 ??         ??
        00105079                 ??         ??
        0010507a                 ??         ??
        0010507b                 ??         ??
        0010507c                 ??         ??
        0010507d                 ??         ??
        0010507e                 ??         ??
        0010507f                 ??         ??
                             stderr                                          XREF[1]:     00103ff8(*)  
        00105080                 ??         ??
        00105081                 ??         ??
        00105082                 ??         ??
        00105083                 ??         ??
        00105084                 ??         ??
        00105085                 ??         ??
        00105086                 ??         ??
        00105087                 ??         ??
                             **************************************************************
                             *                       THUNK FUNCTION                       *
                             **************************************************************
                             thunk undefined __cxa_finalize()
                               Thunked-Function: <EXTERNAL>::__cxa_final
             undefined         AL:1           <RETURN>
                             __cxa_finalize                                  XREF[2]:     __cxa_finalize:001010e0(T), 
                                                                                          __cxa_finalize:001010e4(c), 
                                                                                          00103ff0(*)  
        00105088                 ??         ??
        00105089                 ??         ??
        0010508a                 ??         ??
        0010508b                 ??         ??
        0010508c                 ??         ??
        0010508d                 ??         ??
        0010508e                 ??         ??
        0010508f                 ??         ??
                             //
                             // .comment (Overlay)
                             // SHT_PROGBITS [not-loaded]
                             // ram: .comment::00000000-.comment::00000029
                             //
             assume DF = <UNKNOWN>
                             s_GCC:_(Ubuntu_9.3.0-17ubuntu1~20._.comment__0  XREF[1]:     _elfSectionHeaders::000006d0(*)  
     t::00000000 47 43 43        ds         "GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
                 3a 20 28 
                 55 62 75 
                             //
                             // .shstrtab (Overlay)
                             // SHT_STRTAB [not-loaded]
                             // ram: .shstrtab::00000000-.shstrtab::00000109
                             //
                             DAT_.shstrtab__00000000                         XREF[1]:     _elfSectionHeaders::00000710(*)  
     b::00000000 00              ??         00h
     b::00000001 2e 73 68        ds         ".shstrtab"
                 73 74 72 
                 74 61 62 00
     b::0000000b 2e 69 6e        ds         ".interp"
                 74 65 72 
                 70 00
     b::00000013 2e 6e 6f        ds         ".note.gnu.property"
                 74 65 2e 
                 67 6e 75 
     b::00000026 2e 6e 6f        ds         ".note.gnu.build-id"
                 74 65 2e 
                 67 6e 75 
     b::00000039 2e 6e 6f        ds         ".note.ABI-tag"
                 74 65 2e 
                 41 42 49 
     b::00000047 2e 67 6e        ds         ".gnu.hash"
                 75 2e 68 
                 61 73 68 00
     b::00000051 2e 64 79        ds         ".dynsym"
                 6e 73 79 
                 6d 00
     b::00000059 2e 64 79        ds         ".dynstr"
                 6e 73 74 
                 72 00
     b::00000061 2e 67 6e        ds         ".gnu.version"
                 75 2e 76 
                 65 72 73 
     b::0000006e 2e 67 6e        ds         ".gnu.version_r"
                 75 2e 76 
                 65 72 73 
     b::0000007d 2e 72 65        ds         ".rela.dyn"
                 6c 61 2e 
                 64 79 6e 00
     b::00000087 2e 72 65        ds         ".rela.plt"
                 6c 61 2e 
                 70 6c 74 00
     b::00000091 2e 69 6e        ds         ".init"
                 69 74 00
     b::00000097 2e 70 6c        ds         ".plt.got"
                 74 2e 67 
                 6f 74 00
     b::000000a0 2e 70 6c        ds         ".plt.sec"
                 74 2e 73 
                 65 63 00
     b::000000a9 2e 74 65        ds         ".text"
                 78 74 00
     b::000000af 2e 66 69        ds         ".fini"
                 6e 69 00
     b::000000b5 2e 72 6f        ds         ".rodata"
                 64 61 74 
                 61 00
     b::000000bd 2e 65 68        ds         ".eh_frame_hdr"
                 5f 66 72 
                 61 6d 65 
     b::000000cb 2e 65 68        ds         ".eh_frame"
                 5f 66 72 
                 61 6d 65 00
     b::000000d5 2e 69 6e        ds         ".init_array"
                 69 74 5f 
                 61 72 72 
     b::000000e1 2e 66 69        ds         ".fini_array"
                 6e 69 5f 
                 61 72 72 
     b::000000ed 2e 64 79        ds         ".dynamic"
                 6e 61 6d 
                 69 63 00
     b::000000f6 2e 64 61        ds         ".data"
                 74 61 00
     b::000000fc 2e 62 73        ds         ".bss"
                 73 00
     b::00000101 2e 63 6f        ds         ".comment"
                 6d 6d 65 
                 6e 74 00
                             //
                             // _elfSectionHeaders (Overlay)
                             // Elf Section Headers
                             // ram: _elfSectionHeaders::00000000-_elfSectionHeaders::0000
                             //
                             Elf64_Shdr_ARRAY__elfSectionHeaders__00000000   XREF[1]:     00100028(*)  
     s::00000000 00 00 00        Elf64_Sh                                                    SECTION0 - SHT_NULL
                 00 00 00 
                 00 00 00 